
External_interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006b6  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	af 93       	push	r26
  7a:	bf 93       	push	r27
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
 PORTC &=~(1<<PC0);
  88:	a5 e3       	ldi	r26, 0x35	; 53
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e5 e3       	ldi	r30, 0x35	; 53
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	8c 93       	st	X, r24
}
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	ff 91       	pop	r31
  9c:	ef 91       	pop	r30
  9e:	bf 91       	pop	r27
  a0:	af 91       	pop	r26
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <__vector_2>:

ISR(INT1_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	PORTC |=(1<<PC0);
  ca:	a5 e3       	ldi	r26, 0x35	; 53
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e5 e3       	ldi	r30, 0x35	; 53
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8c 93       	st	X, r24
}
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	bf 91       	pop	r27
  e2:	af 91       	pop	r26
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_18>:

ISR(INT2_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	PORTC ^=(1<<PC0);
 10e:	a5 e3       	ldi	r26, 0x35	; 53
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 27       	eor	r24, r25
 11c:	8c 93       	st	X, r24
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <main>:

int main(void)
{
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	DDRC |=(1<<PC0);
 140:	a4 e3       	ldi	r26, 0x34	; 52
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e4 e3       	ldi	r30, 0x34	; 52
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	8c 93       	st	X, r24
	DDRD &=~(1<<PD2);
 14e:	a1 e3       	ldi	r26, 0x31	; 49
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e1 e3       	ldi	r30, 0x31	; 49
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	8c 93       	st	X, r24
	DDRD &=~(1<<PD3);
 15c:	a1 e3       	ldi	r26, 0x31	; 49
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e1 e3       	ldi	r30, 0x31	; 49
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	87 7f       	andi	r24, 0xF7	; 247
 168:	8c 93       	st	X, r24
	DDRB &=~(1<<PB2);
 16a:	a7 e3       	ldi	r26, 0x37	; 55
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e7 e3       	ldi	r30, 0x37	; 55
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	8c 93       	st	X, r24
	PORTD |=(1<<PD2);
 178:	a2 e3       	ldi	r26, 0x32	; 50
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e2 e3       	ldi	r30, 0x32	; 50
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	84 60       	ori	r24, 0x04	; 4
 184:	8c 93       	st	X, r24
	PORTB |=(1<<PB2);
 186:	a8 e3       	ldi	r26, 0x38	; 56
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e8 e3       	ldi	r30, 0x38	; 56
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	84 60       	ori	r24, 0x04	; 4
 192:	8c 93       	st	X, r24
	GICR |= (1<<INT2)|(1<<INT1)|(1<<INT0);
 194:	ab e5       	ldi	r26, 0x5B	; 91
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	eb e5       	ldi	r30, 0x5B	; 91
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 6e       	ori	r24, 0xE0	; 224
 1a0:	8c 93       	st	X, r24
	MCUCR |=(1<<ISC10)|(1<<ISC11)|(1<<ISC01);
 1a2:	a5 e5       	ldi	r26, 0x55	; 85
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e5 e5       	ldi	r30, 0x55	; 85
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8e 60       	ori	r24, 0x0E	; 14
 1ae:	8c 93       	st	X, r24
	MCUCSR &=~(1<<ISC2);
 1b0:	a4 e5       	ldi	r26, 0x54	; 84
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e4 e5       	ldi	r30, 0x54	; 84
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 7b       	andi	r24, 0xBF	; 191
 1bc:	8c 93       	st	X, r24
	SREG |= (1<<7);
 1be:	af e5       	ldi	r26, 0x5F	; 95
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	ef e5       	ldi	r30, 0x5F	; 95
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8c 93       	st	X, r24
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0x94>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
