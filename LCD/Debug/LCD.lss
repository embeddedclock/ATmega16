
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000305a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  0000305a  000030ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800184  00800184  00003212  2**0
                  ALLOC
  3 .stab         00002af0  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d49  00000000  00000000  00005d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00007c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00007e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000a433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000b901  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000cc0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000cdec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_1>
       8:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 14 	call	0x2994	; 0x2994 <main>
      8a:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e6       	ldi	r22, 0x68	; 104
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e0 59       	subi	r30, 0x90	; 144
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <adc_init>:
 */
static void (*g_behaviour)(uint16) = NULL_PTR;
/*
 * the initializing function to adc on a specific channel
 */
void adc_init(ADC_DATA* a_adcData) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <adc_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = a_adcData->refSelect; //setting the reference voltage of the ADC as AREF not AVCC
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e9 81       	ldd	r30, Y+1	; 0x01
     efe:	fa 81       	ldd	r31, Y+2	; 0x02
     f00:	80 81       	ld	r24, Z
     f02:	8c 93       	st	X, r24
	if (a_adcData->interruptEnable) {
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	81 81       	ldd	r24, Z+1	; 0x01
     f0a:	88 23       	and	r24, r24
     f0c:	41 f0       	breq	.+16     	; 0xf1e <adc_init+0x34>
		SET_BIT(ADCSRA, ADIE); // Enabling ADC interrupt
     f0e:	a6 e2       	ldi	r26, 0x26	; 38
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e6 e2       	ldi	r30, 0x26	; 38
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	88 60       	ori	r24, 0x08	; 8
     f1a:	8c 93       	st	X, r24
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <adc_init+0x42>
	} else {
		CLEAR_BIT(ADCSRA, ADIE); // disabling ADC interrupt
     f1e:	a6 e2       	ldi	r26, 0x26	; 38
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e6 e2       	ldi	r30, 0x26	; 38
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	87 7f       	andi	r24, 0xF7	; 247
     f2a:	8c 93       	st	X, r24
	}
	a_adcData->prescaler &= 0x07;
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	84 81       	ldd	r24, Z+4	; 0x04
     f32:	87 70       	andi	r24, 0x07	; 7
     f34:	e9 81       	ldd	r30, Y+1	; 0x01
     f36:	fa 81       	ldd	r31, Y+2	; 0x02
     f38:	84 83       	std	Z+4, r24	; 0x04
	ADCSRA = (ADCSRA & 0xF8) | (a_adcData->prescaler); // Enabling analog to digital converter on a prescaler
     f3a:	a6 e2       	ldi	r26, 0x26	; 38
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e6 e2       	ldi	r30, 0x26	; 38
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	98 2f       	mov	r25, r24
     f46:	98 7f       	andi	r25, 0xF8	; 248
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	89 2b       	or	r24, r25
     f50:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADEN); // Enabling ADC
     f52:	a6 e2       	ldi	r26, 0x26	; 38
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e6 e2       	ldi	r30, 0x26	; 38
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	8c 93       	st	X, r24
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <adc_readChannel>:
/*
 * reading channel, starting conversion and returning back the conversion value
 * as a 16-bit unsigned integer.
 */
uint16 adc_readChannel(ADC_DATA* a_adcData) {
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <adc_readChannel+0x6>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
	a_adcData->channel_num &= 0x07;
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	83 81       	ldd	r24, Z+3	; 0x03
     f7e:	87 70       	andi	r24, 0x07	; 7
     f80:	e9 81       	ldd	r30, Y+1	; 0x01
     f82:	fa 81       	ldd	r31, Y+2	; 0x02
     f84:	83 83       	std	Z+3, r24	; 0x03
	ADMUX = (ADMUX & 0xE0) | (a_adcData->channel_num); // giving the channel number to the ADC
     f86:	a7 e2       	ldi	r26, 0x27	; 39
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e7 e2       	ldi	r30, 0x27	; 39
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	98 2f       	mov	r25, r24
     f92:	90 7e       	andi	r25, 0xE0	; 224
     f94:	e9 81       	ldd	r30, Y+1	; 0x01
     f96:	fa 81       	ldd	r31, Y+2	; 0x02
     f98:	83 81       	ldd	r24, Z+3	; 0x03
     f9a:	89 2b       	or	r24, r25
     f9c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC); // starting conversion
     f9e:	a6 e2       	ldi	r26, 0x26	; 38
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e6 e2       	ldi	r30, 0x26	; 38
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	8c 93       	st	X, r24
	while (!(ADCSRA & (1 << ADIF)))
     fac:	e6 e2       	ldi	r30, 0x26	; 38
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	80 71       	andi	r24, 0x10	; 16
     fb8:	90 70       	andi	r25, 0x00	; 0
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	b9 f3       	breq	.-18     	; 0xfac <adc_readChannel+0x42>
		// polling until the flag is equal to 1
		;
	SET_BIT(ADCSRA, ADIF); //resetting the flag to zero by writing logical one to the ADIF bit
     fbe:	a6 e2       	ldi	r26, 0x26	; 38
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e6 e2       	ldi	r30, 0x26	; 38
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 61       	ori	r24, 0x10	; 16
     fca:	8c 93       	st	X, r24
	return ADC;
     fcc:	e4 e2       	ldi	r30, 0x24	; 36
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <__vector_14>:
/*
 * the interrupt service routine for the ADC in case of using the interrupt
 */
ISR(ADC_vect) {
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	(*g_behaviour)(ADC); // calling back the function given to the driver using function pointer
    1008:	e0 91 84 01 	lds	r30, 0x0184
    100c:	f0 91 85 01 	lds	r31, 0x0185
    1010:	a4 e2       	ldi	r26, 0x24	; 36
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	8d 91       	ld	r24, X+
    1016:	9c 91       	ld	r25, X
    1018:	09 95       	icall
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <adc_start>:
/*
 * starting conversion for interrupt mode
 */
void adc_start(ADC_DATA* a_adcData) {
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <adc_start+0x6>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01
	g_behaviour = a_adcData->behaviour; // assigning the address of the given function to the global function pointer
    104e:	e9 81       	ldd	r30, Y+1	; 0x01
    1050:	fa 81       	ldd	r31, Y+2	; 0x02
    1052:	85 81       	ldd	r24, Z+5	; 0x05
    1054:	96 81       	ldd	r25, Z+6	; 0x06
    1056:	90 93 85 01 	sts	0x0185, r25
    105a:	80 93 84 01 	sts	0x0184, r24
	a_adcData->channel_num &= 0x07;
    105e:	e9 81       	ldd	r30, Y+1	; 0x01
    1060:	fa 81       	ldd	r31, Y+2	; 0x02
    1062:	83 81       	ldd	r24, Z+3	; 0x03
    1064:	87 70       	andi	r24, 0x07	; 7
    1066:	e9 81       	ldd	r30, Y+1	; 0x01
    1068:	fa 81       	ldd	r31, Y+2	; 0x02
    106a:	83 83       	std	Z+3, r24	; 0x03
	ADMUX = (ADMUX & 0xF0) | (a_adcData->channel_num); // assigning the channel number to the ADC
    106c:	a7 e2       	ldi	r26, 0x27	; 39
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e7 e2       	ldi	r30, 0x27	; 39
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	98 2f       	mov	r25, r24
    1078:	90 7f       	andi	r25, 0xF0	; 240
    107a:	e9 81       	ldd	r30, Y+1	; 0x01
    107c:	fa 81       	ldd	r31, Y+2	; 0x02
    107e:	83 81       	ldd	r24, Z+3	; 0x03
    1080:	89 2b       	or	r24, r25
    1082:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); //start converting
    1084:	a6 e2       	ldi	r26, 0x26	; 38
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e6 e2       	ldi	r30, 0x26	; 38
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <adc_stop>:
/*
 * disabling/terminating function to any ADC process
 */
void adc_stop(void) {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA, ADEN); // Disabling ADC/Terminating current process
    10a4:	a6 e2       	ldi	r26, 0x26	; 38
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e6 e2       	ldi	r30, 0x26	; 38
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 77       	andi	r24, 0x7F	; 127
    10b0:	8c 93       	st	X, r24
}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <calculatorCalculate>:
#include "calculator.h"

/*
 * declaring all static/protected functions in this driver
 */
void calculatorCalculate(void) {
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	66 97       	sbiw	r28, 0x16	; 22
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
	uint64 a_result = 0/*, a_mulResult = 0*/;
    10dc:	1a 86       	std	Y+10, r1	; 0x0a
    10de:	1b 86       	std	Y+11, r1	; 0x0b
    10e0:	1c 86       	std	Y+12, r1	; 0x0c
    10e2:	1d 86       	std	Y+13, r1	; 0x0d
    10e4:	1e 86       	std	Y+14, r1	; 0x0e
    10e6:	1f 86       	std	Y+15, r1	; 0x0f
    10e8:	18 8a       	std	Y+16, r1	; 0x10
    10ea:	19 8a       	std	Y+17, r1	; 0x11
	uint32 a_operand1 = 0, a_operand2 = 0;
    10ec:	1e 82       	std	Y+6, r1	; 0x06
    10ee:	1f 82       	std	Y+7, r1	; 0x07
    10f0:	18 86       	std	Y+8, r1	; 0x08
    10f2:	19 86       	std	Y+9, r1	; 0x09
    10f4:	1a 82       	std	Y+2, r1	; 0x02
    10f6:	1b 82       	std	Y+3, r1	; 0x03
    10f8:	1c 82       	std	Y+4, r1	; 0x04
    10fa:	1d 82       	std	Y+5, r1	; 0x05
	uint8 keypadCharacter = 0, a_operation = 0;
    10fc:	1a 8a       	std	Y+18, r1	; 0x12
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	81 c1       	rjmp	.+770    	; 0x1404 <calculatorCalculate+0x34c>
	while (keypadCharacter != 13) {
		keypadCharacter = keypad_getNumber();
    1102:	0e 94 56 0d 	call	0x1aac	; 0x1aac <keypad_getNumber>
    1106:	8a 8b       	std	Y+18, r24	; 0x12
		lcd_displayCharacter(keypadCharacter);
    1108:	8a 89       	ldd	r24, Y+18	; 0x12
    110a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <lcd_displayCharacter>
		if (keypadCharacter >= 48 && keypadCharacter <= 57) {
    110e:	8a 89       	ldd	r24, Y+18	; 0x12
    1110:	80 33       	cpi	r24, 0x30	; 48
    1112:	08 f4       	brcc	.+2      	; 0x1116 <calculatorCalculate+0x5e>
    1114:	45 c0       	rjmp	.+138    	; 0x11a0 <calculatorCalculate+0xe8>
    1116:	8a 89       	ldd	r24, Y+18	; 0x12
    1118:	8a 33       	cpi	r24, 0x3A	; 58
    111a:	08 f0       	brcs	.+2      	; 0x111e <calculatorCalculate+0x66>
    111c:	41 c0       	rjmp	.+130    	; 0x11a0 <calculatorCalculate+0xe8>
			if (a_operation == 0) {
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	88 23       	and	r24, r24
    1122:	f9 f4       	brne	.+62     	; 0x1162 <calculatorCalculate+0xaa>
				a_operand1 = (a_operand1 * 10)
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	a8 85       	ldd	r26, Y+8	; 0x08
    112a:	b9 85       	ldd	r27, Y+9	; 0x09
    112c:	2a e0       	ldi	r18, 0x0A	; 10
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 48 17 	call	0x2e90	; 0x2e90 <__mulsi3>
    113c:	7b 01       	movw	r14, r22
    113e:	8c 01       	movw	r16, r24
    1140:	ce 01       	movw	r24, r28
    1142:	42 96       	adiw	r24, 0x12	; 18
    1144:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <atoi>
    1148:	aa 27       	eor	r26, r26
    114a:	97 fd       	sbrc	r25, 7
    114c:	a0 95       	com	r26
    114e:	ba 2f       	mov	r27, r26
    1150:	8e 0d       	add	r24, r14
    1152:	9f 1d       	adc	r25, r15
    1154:	a0 1f       	adc	r26, r16
    1156:	b1 1f       	adc	r27, r17
    1158:	8e 83       	std	Y+6, r24	; 0x06
    115a:	9f 83       	std	Y+7, r25	; 0x07
    115c:	a8 87       	std	Y+8, r26	; 0x08
    115e:	b9 87       	std	Y+9, r27	; 0x09
    1160:	51 c1       	rjmp	.+674    	; 0x1404 <calculatorCalculate+0x34c>
						+ atoi((int8 *) &keypadCharacter);

			} else {
				a_operand2 = (a_operand2 * 10)
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	ac 81       	ldd	r26, Y+4	; 0x04
    1168:	bd 81       	ldd	r27, Y+5	; 0x05
    116a:	2a e0       	ldi	r18, 0x0A	; 10
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	bc 01       	movw	r22, r24
    1174:	cd 01       	movw	r24, r26
    1176:	0e 94 48 17 	call	0x2e90	; 0x2e90 <__mulsi3>
    117a:	7b 01       	movw	r14, r22
    117c:	8c 01       	movw	r16, r24
    117e:	ce 01       	movw	r24, r28
    1180:	42 96       	adiw	r24, 0x12	; 18
    1182:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <atoi>
    1186:	aa 27       	eor	r26, r26
    1188:	97 fd       	sbrc	r25, 7
    118a:	a0 95       	com	r26
    118c:	ba 2f       	mov	r27, r26
    118e:	8e 0d       	add	r24, r14
    1190:	9f 1d       	adc	r25, r15
    1192:	a0 1f       	adc	r26, r16
    1194:	b1 1f       	adc	r27, r17
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	9b 83       	std	Y+3, r25	; 0x03
    119a:	ac 83       	std	Y+4, r26	; 0x04
    119c:	bd 83       	std	Y+5, r27	; 0x05
    119e:	32 c1       	rjmp	.+612    	; 0x1404 <calculatorCalculate+0x34c>
						+ atoi((int8 *) &keypadCharacter);

			}

		} else if (keypadCharacter >= 42 && keypadCharacter <= 47) {
    11a0:	8a 89       	ldd	r24, Y+18	; 0x12
    11a2:	8a 32       	cpi	r24, 0x2A	; 42
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <calculatorCalculate+0xf0>
    11a6:	83 c0       	rjmp	.+262    	; 0x12ae <calculatorCalculate+0x1f6>
    11a8:	8a 89       	ldd	r24, Y+18	; 0x12
    11aa:	80 33       	cpi	r24, 0x30	; 48
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <calculatorCalculate+0xf8>
    11ae:	7f c0       	rjmp	.+254    	; 0x12ae <calculatorCalculate+0x1f6>
			if (0 != a_operation) {
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 23       	and	r24, r24
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <calculatorCalculate+0x100>
    11b6:	78 c0       	rjmp	.+240    	; 0x12a8 <calculatorCalculate+0x1f0>
				switch (a_operation) {
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	e8 2e       	mov	r14, r24
    11bc:	ff 24       	eor	r15, r15
    11be:	fe 8a       	std	Y+22, r15	; 0x16
    11c0:	ed 8a       	std	Y+21, r14	; 0x15
    11c2:	0d 89       	ldd	r16, Y+21	; 0x15
    11c4:	1e 89       	ldd	r17, Y+22	; 0x16
    11c6:	0b 32       	cpi	r16, 0x2B	; 43
    11c8:	11 05       	cpc	r17, r1
    11ca:	b9 f0       	breq	.+46     	; 0x11fa <calculatorCalculate+0x142>
    11cc:	2d 89       	ldd	r18, Y+21	; 0x15
    11ce:	3e 89       	ldd	r19, Y+22	; 0x16
    11d0:	2c 32       	cpi	r18, 0x2C	; 44
    11d2:	31 05       	cpc	r19, r1
    11d4:	34 f4       	brge	.+12     	; 0x11e2 <calculatorCalculate+0x12a>
    11d6:	8d 89       	ldd	r24, Y+21	; 0x15
    11d8:	9e 89       	ldd	r25, Y+22	; 0x16
    11da:	8a 32       	cpi	r24, 0x2A	; 42
    11dc:	91 05       	cpc	r25, r1
    11de:	b9 f1       	breq	.+110    	; 0x124e <calculatorCalculate+0x196>
    11e0:	63 c0       	rjmp	.+198    	; 0x12a8 <calculatorCalculate+0x1f0>
    11e2:	0d 89       	ldd	r16, Y+21	; 0x15
    11e4:	1e 89       	ldd	r17, Y+22	; 0x16
    11e6:	0d 32       	cpi	r16, 0x2D	; 45
    11e8:	11 05       	cpc	r17, r1
    11ea:	e1 f0       	breq	.+56     	; 0x1224 <calculatorCalculate+0x16c>
    11ec:	2d 89       	ldd	r18, Y+21	; 0x15
    11ee:	3e 89       	ldd	r19, Y+22	; 0x16
    11f0:	2f 32       	cpi	r18, 0x2F	; 47
    11f2:	31 05       	cpc	r19, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <calculatorCalculate+0x140>
    11f6:	42 c0       	rjmp	.+132    	; 0x127c <calculatorCalculate+0x1c4>
    11f8:	57 c0       	rjmp	.+174    	; 0x12a8 <calculatorCalculate+0x1f0>
				case '+':
					a_operand1 += a_operand2;
    11fa:	8e 81       	ldd	r24, Y+6	; 0x06
    11fc:	9f 81       	ldd	r25, Y+7	; 0x07
    11fe:	a8 85       	ldd	r26, Y+8	; 0x08
    1200:	b9 85       	ldd	r27, Y+9	; 0x09
    1202:	2a 81       	ldd	r18, Y+2	; 0x02
    1204:	3b 81       	ldd	r19, Y+3	; 0x03
    1206:	4c 81       	ldd	r20, Y+4	; 0x04
    1208:	5d 81       	ldd	r21, Y+5	; 0x05
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	a4 1f       	adc	r26, r20
    1210:	b5 1f       	adc	r27, r21
    1212:	8e 83       	std	Y+6, r24	; 0x06
    1214:	9f 83       	std	Y+7, r25	; 0x07
    1216:	a8 87       	std	Y+8, r26	; 0x08
    1218:	b9 87       	std	Y+9, r27	; 0x09
					a_operand2 = 0;
    121a:	1a 82       	std	Y+2, r1	; 0x02
    121c:	1b 82       	std	Y+3, r1	; 0x03
    121e:	1c 82       	std	Y+4, r1	; 0x04
    1220:	1d 82       	std	Y+5, r1	; 0x05
    1222:	42 c0       	rjmp	.+132    	; 0x12a8 <calculatorCalculate+0x1f0>
					break;
				case '-':
					a_operand1 -= a_operand2;
    1224:	8e 81       	ldd	r24, Y+6	; 0x06
    1226:	9f 81       	ldd	r25, Y+7	; 0x07
    1228:	a8 85       	ldd	r26, Y+8	; 0x08
    122a:	b9 85       	ldd	r27, Y+9	; 0x09
    122c:	2a 81       	ldd	r18, Y+2	; 0x02
    122e:	3b 81       	ldd	r19, Y+3	; 0x03
    1230:	4c 81       	ldd	r20, Y+4	; 0x04
    1232:	5d 81       	ldd	r21, Y+5	; 0x05
    1234:	82 1b       	sub	r24, r18
    1236:	93 0b       	sbc	r25, r19
    1238:	a4 0b       	sbc	r26, r20
    123a:	b5 0b       	sbc	r27, r21
    123c:	8e 83       	std	Y+6, r24	; 0x06
    123e:	9f 83       	std	Y+7, r25	; 0x07
    1240:	a8 87       	std	Y+8, r26	; 0x08
    1242:	b9 87       	std	Y+9, r27	; 0x09
					a_operand2 = 0;
    1244:	1a 82       	std	Y+2, r1	; 0x02
    1246:	1b 82       	std	Y+3, r1	; 0x03
    1248:	1c 82       	std	Y+4, r1	; 0x04
    124a:	1d 82       	std	Y+5, r1	; 0x05
    124c:	2d c0       	rjmp	.+90     	; 0x12a8 <calculatorCalculate+0x1f0>
					break;
				case '*':
					a_operand1 *= a_operand2;
    124e:	8e 81       	ldd	r24, Y+6	; 0x06
    1250:	9f 81       	ldd	r25, Y+7	; 0x07
    1252:	a8 85       	ldd	r26, Y+8	; 0x08
    1254:	b9 85       	ldd	r27, Y+9	; 0x09
    1256:	2a 81       	ldd	r18, Y+2	; 0x02
    1258:	3b 81       	ldd	r19, Y+3	; 0x03
    125a:	4c 81       	ldd	r20, Y+4	; 0x04
    125c:	5d 81       	ldd	r21, Y+5	; 0x05
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	0e 94 48 17 	call	0x2e90	; 0x2e90 <__mulsi3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	8e 83       	std	Y+6, r24	; 0x06
    126c:	9f 83       	std	Y+7, r25	; 0x07
    126e:	a8 87       	std	Y+8, r26	; 0x08
    1270:	b9 87       	std	Y+9, r27	; 0x09
					a_operand2 = 0;
    1272:	1a 82       	std	Y+2, r1	; 0x02
    1274:	1b 82       	std	Y+3, r1	; 0x03
    1276:	1c 82       	std	Y+4, r1	; 0x04
    1278:	1d 82       	std	Y+5, r1	; 0x05
    127a:	16 c0       	rjmp	.+44     	; 0x12a8 <calculatorCalculate+0x1f0>
					break;
				case '/':
					a_operand1 /= a_operand2;
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	a8 85       	ldd	r26, Y+8	; 0x08
    1282:	b9 85       	ldd	r27, Y+9	; 0x09
    1284:	2a 81       	ldd	r18, Y+2	; 0x02
    1286:	3b 81       	ldd	r19, Y+3	; 0x03
    1288:	4c 81       	ldd	r20, Y+4	; 0x04
    128a:	5d 81       	ldd	r21, Y+5	; 0x05
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__udivmodsi4>
    1294:	da 01       	movw	r26, r20
    1296:	c9 01       	movw	r24, r18
    1298:	8e 83       	std	Y+6, r24	; 0x06
    129a:	9f 83       	std	Y+7, r25	; 0x07
    129c:	a8 87       	std	Y+8, r26	; 0x08
    129e:	b9 87       	std	Y+9, r27	; 0x09
					a_operand2 = 0;
    12a0:	1a 82       	std	Y+2, r1	; 0x02
    12a2:	1b 82       	std	Y+3, r1	; 0x03
    12a4:	1c 82       	std	Y+4, r1	; 0x04
    12a6:	1d 82       	std	Y+5, r1	; 0x05
					break;
				default:
					break;
				}
			}
			a_operation = keypadCharacter;
    12a8:	8a 89       	ldd	r24, Y+18	; 0x12
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	ab c0       	rjmp	.+342    	; 0x1404 <calculatorCalculate+0x34c>
		} else if (keypadCharacter == '=') {
    12ae:	8a 89       	ldd	r24, Y+18	; 0x12
    12b0:	8d 33       	cpi	r24, 0x3D	; 61
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <calculatorCalculate+0x1fe>
    12b4:	a7 c0       	rjmp	.+334    	; 0x1404 <calculatorCalculate+0x34c>
			CALCULATOR(a_operation, a_operand1, a_operand2, a_result);
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	e8 2e       	mov	r14, r24
    12ba:	ff 24       	eor	r15, r15
    12bc:	fc 8a       	std	Y+20, r15	; 0x14
    12be:	eb 8a       	std	Y+19, r14	; 0x13
    12c0:	0b 89       	ldd	r16, Y+19	; 0x13
    12c2:	1c 89       	ldd	r17, Y+20	; 0x14
    12c4:	0b 32       	cpi	r16, 0x2B	; 43
    12c6:	11 05       	cpc	r17, r1
    12c8:	a9 f1       	breq	.+106    	; 0x1334 <calculatorCalculate+0x27c>
    12ca:	2b 89       	ldd	r18, Y+19	; 0x13
    12cc:	3c 89       	ldd	r19, Y+20	; 0x14
    12ce:	2c 32       	cpi	r18, 0x2C	; 44
    12d0:	31 05       	cpc	r19, r1
    12d2:	34 f4       	brge	.+12     	; 0x12e0 <calculatorCalculate+0x228>
    12d4:	8b 89       	ldd	r24, Y+19	; 0x13
    12d6:	9c 89       	ldd	r25, Y+20	; 0x14
    12d8:	8a 32       	cpi	r24, 0x2A	; 42
    12da:	91 05       	cpc	r25, r1
    12dc:	71 f0       	breq	.+28     	; 0x12fa <calculatorCalculate+0x242>
    12de:	80 c0       	rjmp	.+256    	; 0x13e0 <calculatorCalculate+0x328>
    12e0:	0b 89       	ldd	r16, Y+19	; 0x13
    12e2:	1c 89       	ldd	r17, Y+20	; 0x14
    12e4:	0d 32       	cpi	r16, 0x2D	; 45
    12e6:	11 05       	cpc	r17, r1
    12e8:	09 f4       	brne	.+2      	; 0x12ec <calculatorCalculate+0x234>
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <calculatorCalculate+0x2b2>
    12ec:	2b 89       	ldd	r18, Y+19	; 0x13
    12ee:	3c 89       	ldd	r19, Y+20	; 0x14
    12f0:	2f 32       	cpi	r18, 0x2F	; 47
    12f2:	31 05       	cpc	r19, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <calculatorCalculate+0x240>
    12f6:	58 c0       	rjmp	.+176    	; 0x13a8 <calculatorCalculate+0x2f0>
    12f8:	73 c0       	rjmp	.+230    	; 0x13e0 <calculatorCalculate+0x328>
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	9f 81       	ldd	r25, Y+7	; 0x07
    12fe:	a8 85       	ldd	r26, Y+8	; 0x08
    1300:	b9 85       	ldd	r27, Y+9	; 0x09
    1302:	2a 81       	ldd	r18, Y+2	; 0x02
    1304:	3b 81       	ldd	r19, Y+3	; 0x03
    1306:	4c 81       	ldd	r20, Y+4	; 0x04
    1308:	5d 81       	ldd	r21, Y+5	; 0x05
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <__mulsi3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9c 01       	movw	r18, r24
    1318:	ad 01       	movw	r20, r26
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	2a 87       	std	Y+10, r18	; 0x0a
    1324:	3b 87       	std	Y+11, r19	; 0x0b
    1326:	4c 87       	std	Y+12, r20	; 0x0c
    1328:	5d 87       	std	Y+13, r21	; 0x0d
    132a:	6e 87       	std	Y+14, r22	; 0x0e
    132c:	7f 87       	std	Y+15, r23	; 0x0f
    132e:	88 8b       	std	Y+16, r24	; 0x10
    1330:	99 8b       	std	Y+17, r25	; 0x11
    1332:	56 c0       	rjmp	.+172    	; 0x13e0 <calculatorCalculate+0x328>
    1334:	2e 81       	ldd	r18, Y+6	; 0x06
    1336:	3f 81       	ldd	r19, Y+7	; 0x07
    1338:	48 85       	ldd	r20, Y+8	; 0x08
    133a:	59 85       	ldd	r21, Y+9	; 0x09
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	ac 81       	ldd	r26, Y+4	; 0x04
    1342:	bd 81       	ldd	r27, Y+5	; 0x05
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	a4 1f       	adc	r26, r20
    134a:	b5 1f       	adc	r27, r21
    134c:	9c 01       	movw	r18, r24
    134e:	ad 01       	movw	r20, r26
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	2a 87       	std	Y+10, r18	; 0x0a
    135a:	3b 87       	std	Y+11, r19	; 0x0b
    135c:	4c 87       	std	Y+12, r20	; 0x0c
    135e:	5d 87       	std	Y+13, r21	; 0x0d
    1360:	6e 87       	std	Y+14, r22	; 0x0e
    1362:	7f 87       	std	Y+15, r23	; 0x0f
    1364:	88 8b       	std	Y+16, r24	; 0x10
    1366:	99 8b       	std	Y+17, r25	; 0x11
    1368:	3b c0       	rjmp	.+118    	; 0x13e0 <calculatorCalculate+0x328>
    136a:	2e 81       	ldd	r18, Y+6	; 0x06
    136c:	3f 81       	ldd	r19, Y+7	; 0x07
    136e:	48 85       	ldd	r20, Y+8	; 0x08
    1370:	59 85       	ldd	r21, Y+9	; 0x09
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	ac 81       	ldd	r26, Y+4	; 0x04
    1378:	bd 81       	ldd	r27, Y+5	; 0x05
    137a:	79 01       	movw	r14, r18
    137c:	8a 01       	movw	r16, r20
    137e:	e8 1a       	sub	r14, r24
    1380:	f9 0a       	sbc	r15, r25
    1382:	0a 0b       	sbc	r16, r26
    1384:	1b 0b       	sbc	r17, r27
    1386:	d8 01       	movw	r26, r16
    1388:	c7 01       	movw	r24, r14
    138a:	9c 01       	movw	r18, r24
    138c:	ad 01       	movw	r20, r26
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	2a 87       	std	Y+10, r18	; 0x0a
    1398:	3b 87       	std	Y+11, r19	; 0x0b
    139a:	4c 87       	std	Y+12, r20	; 0x0c
    139c:	5d 87       	std	Y+13, r21	; 0x0d
    139e:	6e 87       	std	Y+14, r22	; 0x0e
    13a0:	7f 87       	std	Y+15, r23	; 0x0f
    13a2:	88 8b       	std	Y+16, r24	; 0x10
    13a4:	99 8b       	std	Y+17, r25	; 0x11
    13a6:	1c c0       	rjmp	.+56     	; 0x13e0 <calculatorCalculate+0x328>
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	a8 85       	ldd	r26, Y+8	; 0x08
    13ae:	b9 85       	ldd	r27, Y+9	; 0x09
    13b0:	2a 81       	ldd	r18, Y+2	; 0x02
    13b2:	3b 81       	ldd	r19, Y+3	; 0x03
    13b4:	4c 81       	ldd	r20, Y+4	; 0x04
    13b6:	5d 81       	ldd	r21, Y+5	; 0x05
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__udivmodsi4>
    13c0:	da 01       	movw	r26, r20
    13c2:	c9 01       	movw	r24, r18
    13c4:	9c 01       	movw	r18, r24
    13c6:	ad 01       	movw	r20, r26
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	2a 87       	std	Y+10, r18	; 0x0a
    13d2:	3b 87       	std	Y+11, r19	; 0x0b
    13d4:	4c 87       	std	Y+12, r20	; 0x0c
    13d6:	5d 87       	std	Y+13, r21	; 0x0d
    13d8:	6e 87       	std	Y+14, r22	; 0x0e
    13da:	7f 87       	std	Y+15, r23	; 0x0f
    13dc:	88 8b       	std	Y+16, r24	; 0x10
    13de:	99 8b       	std	Y+17, r25	; 0x11
			lcd_integerToString(a_result);
    13e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    13e2:	bb 84       	ldd	r11, Y+11	; 0x0b
    13e4:	cc 84       	ldd	r12, Y+12	; 0x0c
    13e6:	dd 84       	ldd	r13, Y+13	; 0x0d
    13e8:	ee 84       	ldd	r14, Y+14	; 0x0e
    13ea:	ff 84       	ldd	r15, Y+15	; 0x0f
    13ec:	08 89       	ldd	r16, Y+16	; 0x10
    13ee:	19 89       	ldd	r17, Y+17	; 0x11
    13f0:	2a 2d       	mov	r18, r10
    13f2:	3b 2d       	mov	r19, r11
    13f4:	4c 2d       	mov	r20, r12
    13f6:	5d 2d       	mov	r21, r13
    13f8:	6e 2d       	mov	r22, r14
    13fa:	7f 2d       	mov	r23, r15
    13fc:	80 2f       	mov	r24, r16
    13fe:	91 2f       	mov	r25, r17
    1400:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <lcd_integerToString>
 */
void calculatorCalculate(void) {
	uint64 a_result = 0/*, a_mulResult = 0*/;
	uint32 a_operand1 = 0, a_operand2 = 0;
	uint8 keypadCharacter = 0, a_operation = 0;
	while (keypadCharacter != 13) {
    1404:	8a 89       	ldd	r24, Y+18	; 0x12
    1406:	8d 30       	cpi	r24, 0x0D	; 13
    1408:	09 f0       	breq	.+2      	; 0x140c <calculatorCalculate+0x354>
    140a:	7b ce       	rjmp	.-778    	; 0x1102 <calculatorCalculate+0x4a>
			CALCULATOR(a_operation, a_operand1, a_operand2, a_result);
			lcd_integerToString(a_result);

		}
	}
	lcd_clear();
    140c:	0e 94 14 13 	call	0x2628	; 0x2628 <lcd_clear>

}
    1410:	66 96       	adiw	r28, 0x16	; 22
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	df 90       	pop	r13
    142a:	cf 90       	pop	r12
    142c:	bf 90       	pop	r11
    142e:	af 90       	pop	r10
    1430:	08 95       	ret

00001432 <dcMotorInit>:
 *      Author : Mohamad																		*
 ************************************************************************************************/

#include "dcMotor.h"

void dcMotorInit(dcMotorData * a_motorData) {
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <dcMotorInit+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <dcMotorInit+0x8>
    143a:	00 d0       	rcall	.+0      	; 0x143c <dcMotorInit+0xa>
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	9a 83       	std	Y+2, r25	; 0x02
    1442:	89 83       	std	Y+1, r24	; 0x01
	a_motorData->dcMotorPort &= 0b00000111;
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	80 81       	ld	r24, Z
    144a:	87 70       	andi	r24, 0x07	; 7
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	80 83       	st	Z, r24
	switch (a_motorData->dcMotorPort) {
    1452:	e9 81       	ldd	r30, Y+1	; 0x01
    1454:	fa 81       	ldd	r31, Y+2	; 0x02
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3e 83       	std	Y+6, r19	; 0x06
    145e:	2d 83       	std	Y+5, r18	; 0x05
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	61 f1       	breq	.+88     	; 0x14c2 <dcMotorInit+0x90>
    146a:	2d 81       	ldd	r18, Y+5	; 0x05
    146c:	3e 81       	ldd	r19, Y+6	; 0x06
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <dcMotorInit+0x4c>
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f0       	breq	.+26     	; 0x1496 <dcMotorInit+0x64>
    147c:	62 c0       	rjmp	.+196    	; 0x1542 <dcMotorInit+0x110>
    147e:	2d 81       	ldd	r18, Y+5	; 0x05
    1480:	3e 81       	ldd	r19, Y+6	; 0x06
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	99 f1       	breq	.+102    	; 0x14ee <dcMotorInit+0xbc>
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	09 f4       	brne	.+2      	; 0x1494 <dcMotorInit+0x62>
    1492:	43 c0       	rjmp	.+134    	; 0x151a <dcMotorInit+0xe8>
    1494:	56 c0       	rjmp	.+172    	; 0x1542 <dcMotorInit+0x110>
	case 0: // PORTA
		SET_BIT(DDRA, a_motorData->dcMotorPin);
    1496:	aa e3       	ldi	r26, 0x3A	; 58
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ea e3       	ldi	r30, 0x3A	; 58
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	e9 81       	ldd	r30, Y+1	; 0x01
    14a4:	fa 81       	ldd	r31, Y+2	; 0x02
    14a6:	81 81       	ldd	r24, Z+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <dcMotorInit+0x86>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <dcMotorInit+0x82>
    14bc:	84 2b       	or	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	40 c0       	rjmp	.+128    	; 0x1542 <dcMotorInit+0x110>
		break;
	case 1: // PORTB
		SET_BIT(DDRB, a_motorData->dcMotorPin);
    14c2:	a7 e3       	ldi	r26, 0x37	; 55
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e7 e3       	ldi	r30, 0x37	; 55
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	e9 81       	ldd	r30, Y+1	; 0x01
    14d0:	fa 81       	ldd	r31, Y+2	; 0x02
    14d2:	81 81       	ldd	r24, Z+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <dcMotorInit+0xb2>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <dcMotorInit+0xae>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	2a c0       	rjmp	.+84     	; 0x1542 <dcMotorInit+0x110>
		break;
	case 2: // PORTC
		SET_BIT(DDRC, a_motorData->dcMotorPin);
    14ee:	a4 e3       	ldi	r26, 0x34	; 52
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e4 e3       	ldi	r30, 0x34	; 52
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	81 81       	ldd	r24, Z+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <dcMotorInit+0xde>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <dcMotorInit+0xda>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <dcMotorInit+0x110>
		break;
	case 3: // PORTD
		SET_BIT(DDRD, a_motorData->dcMotorPin);
    151a:	a1 e3       	ldi	r26, 0x31	; 49
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e1 e3       	ldi	r30, 0x31	; 49
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	e9 81       	ldd	r30, Y+1	; 0x01
    1528:	fa 81       	ldd	r31, Y+2	; 0x02
    152a:	81 81       	ldd	r24, Z+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <dcMotorInit+0x108>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	2a 95       	dec	r18
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <dcMotorInit+0x104>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
		break;
	}
	a_motorData->dcMotorDiPort &= 0b00000111;
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	87 70       	andi	r24, 0x07	; 7
    154a:	e9 81       	ldd	r30, Y+1	; 0x01
    154c:	fa 81       	ldd	r31, Y+2	; 0x02
    154e:	82 83       	std	Z+2, r24	; 0x02
	switch (a_motorData->dcMotorDiPort) {
    1550:	e9 81       	ldd	r30, Y+1	; 0x01
    1552:	fa 81       	ldd	r31, Y+2	; 0x02
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3c 83       	std	Y+4, r19	; 0x04
    155c:	2b 83       	std	Y+3, r18	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	91 05       	cpc	r25, r1
    1566:	61 f1       	breq	.+88     	; 0x15c0 <dcMotorInit+0x18e>
    1568:	2b 81       	ldd	r18, Y+3	; 0x03
    156a:	3c 81       	ldd	r19, Y+4	; 0x04
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	2c f4       	brge	.+10     	; 0x157c <dcMotorInit+0x14a>
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f0       	breq	.+26     	; 0x1594 <dcMotorInit+0x162>
    157a:	63 c0       	rjmp	.+198    	; 0x1642 <dcMotorInit+0x210>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	99 f1       	breq	.+102    	; 0x15ec <dcMotorInit+0x1ba>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <dcMotorInit+0x160>
    1590:	43 c0       	rjmp	.+134    	; 0x1618 <dcMotorInit+0x1e6>
    1592:	57 c0       	rjmp	.+174    	; 0x1642 <dcMotorInit+0x210>
	case 0: // PORTA
		SET_BIT(DDRA, a_motorData->dcMotorDiPin);
    1594:	aa e3       	ldi	r26, 0x3A	; 58
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ea e3       	ldi	r30, 0x3A	; 58
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	e9 81       	ldd	r30, Y+1	; 0x01
    15a2:	fa 81       	ldd	r31, Y+2	; 0x02
    15a4:	83 81       	ldd	r24, Z+3	; 0x03
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <dcMotorInit+0x184>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <dcMotorInit+0x180>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	41 c0       	rjmp	.+130    	; 0x1642 <dcMotorInit+0x210>
		break;
	case 1: // PORTB
		SET_BIT(DDRB, a_motorData->dcMotorDiPin);
    15c0:	a7 e3       	ldi	r26, 0x37	; 55
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e7 e3       	ldi	r30, 0x37	; 55
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	e9 81       	ldd	r30, Y+1	; 0x01
    15ce:	fa 81       	ldd	r31, Y+2	; 0x02
    15d0:	83 81       	ldd	r24, Z+3	; 0x03
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <dcMotorInit+0x1b0>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <dcMotorInit+0x1ac>
    15e6:	84 2b       	or	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	2b c0       	rjmp	.+86     	; 0x1642 <dcMotorInit+0x210>
		break;
	case 2: // PORTC
		SET_BIT(DDRC, a_motorData->dcMotorDiPin);
    15ec:	a4 e3       	ldi	r26, 0x34	; 52
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e4 e3       	ldi	r30, 0x34	; 52
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	e9 81       	ldd	r30, Y+1	; 0x01
    15fa:	fa 81       	ldd	r31, Y+2	; 0x02
    15fc:	83 81       	ldd	r24, Z+3	; 0x03
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <dcMotorInit+0x1dc>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <dcMotorInit+0x1d8>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	15 c0       	rjmp	.+42     	; 0x1642 <dcMotorInit+0x210>
		break;
	case 3: // PORTD
		SET_BIT(DDRD, a_motorData->dcMotorDiPin);
    1618:	a1 e3       	ldi	r26, 0x31	; 49
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e1 e3       	ldi	r30, 0x31	; 49
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	e9 81       	ldd	r30, Y+1	; 0x01
    1626:	fa 81       	ldd	r31, Y+2	; 0x02
    1628:	83 81       	ldd	r24, Z+3	; 0x03
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <dcMotorInit+0x208>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <dcMotorInit+0x204>
    163e:	84 2b       	or	r24, r20
    1640:	8c 93       	st	X, r24
		break;
	}

}
    1642:	26 96       	adiw	r28, 0x06	; 6
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <dcMotorRev>:
void dcMotorRev(dcMotorData * a_motorData) {
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <dcMotorRev+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <dcMotorRev+0x8>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
	switch (a_motorData->dcMotorDiPort) {
    1664:	e9 81       	ldd	r30, Y+1	; 0x01
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3c 83       	std	Y+4, r19	; 0x04
    1670:	2b 83       	std	Y+3, r18	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	61 f1       	breq	.+88     	; 0x16d4 <dcMotorRev+0x80>
    167c:	2b 81       	ldd	r18, Y+3	; 0x03
    167e:	3c 81       	ldd	r19, Y+4	; 0x04
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <dcMotorRev+0x3c>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	69 f0       	breq	.+26     	; 0x16a8 <dcMotorRev+0x54>
    168e:	63 c0       	rjmp	.+198    	; 0x1756 <dcMotorRev+0x102>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	99 f1       	breq	.+102    	; 0x1700 <dcMotorRev+0xac>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <dcMotorRev+0x52>
    16a4:	43 c0       	rjmp	.+134    	; 0x172c <dcMotorRev+0xd8>
    16a6:	57 c0       	rjmp	.+174    	; 0x1756 <dcMotorRev+0x102>
	case 0: // PORTA
		TOGGLE_BIT(PORTA, a_motorData->dcMotorDiPin);
    16a8:	ab e3       	ldi	r26, 0x3B	; 59
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e3       	ldi	r30, 0x3B	; 59
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	e9 81       	ldd	r30, Y+1	; 0x01
    16b6:	fa 81       	ldd	r31, Y+2	; 0x02
    16b8:	83 81       	ldd	r24, Z+3	; 0x03
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <dcMotorRev+0x76>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <dcMotorRev+0x72>
    16ce:	84 27       	eor	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	41 c0       	rjmp	.+130    	; 0x1756 <dcMotorRev+0x102>
		break;
	case 1: // PORTB
		TOGGLE_BIT(PORTB, a_motorData->dcMotorDiPin);
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	83 81       	ldd	r24, Z+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <dcMotorRev+0xa2>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <dcMotorRev+0x9e>
    16fa:	84 27       	eor	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	2b c0       	rjmp	.+86     	; 0x1756 <dcMotorRev+0x102>
		break;
	case 2: // PORTC
		TOGGLE_BIT(PORTC, a_motorData->dcMotorDiPin);
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	83 81       	ldd	r24, Z+3	; 0x03
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <dcMotorRev+0xce>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <dcMotorRev+0xca>
    1726:	84 27       	eor	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	15 c0       	rjmp	.+42     	; 0x1756 <dcMotorRev+0x102>
		break;
	case 3: // PORTD
		TOGGLE_BIT(PORTD, a_motorData->dcMotorDiPin);
    172c:	a2 e3       	ldi	r26, 0x32	; 50
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e2 e3       	ldi	r30, 0x32	; 50
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	83 81       	ldd	r24, Z+3	; 0x03
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <dcMotorRev+0xfa>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <dcMotorRev+0xf6>
    1752:	84 27       	eor	r24, r20
    1754:	8c 93       	st	X, r24
		break;
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <dcMotorCW>:
void dcMotorCW(dcMotorData * a_motorData) {
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <dcMotorCW+0x6>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01

}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <dcMotorCCW>:
void dcMotorCCW(dcMotorData * a_motorData) {
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <dcMotorCCW+0x6>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	89 83       	std	Y+1, r24	; 0x01

}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <eInterruptInit>:
 * 	Fun argument(s) quantity : 1																*
 * 	Fun argument(s) type : Pointer to eInterruptData structure									*
 *  Function argument(s) : Pointer to eInterruptData structure contains the user configurations	*
 ************************************************************************************************/

void eInterruptInit(eInterruptData* a_interruptData) {
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <eInterruptInit+0x6>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
	/****************************************************************
	 * setting the behaviour to the specific pointer to function	*
	 ****************************************************************/
	g_eInterruptBehaviour[a_interruptData->interruptSelect] =
    17a2:	e9 81       	ldd	r30, Y+1	; 0x01
    17a4:	fa 81       	ldd	r31, Y+2	; 0x02
    17a6:	80 81       	ld	r24, Z
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	e9 81       	ldd	r30, Y+1	; 0x01
    17ae:	fa 81       	ldd	r31, Y+2	; 0x02
    17b0:	23 81       	ldd	r18, Z+3	; 0x03
    17b2:	34 81       	ldd	r19, Z+4	; 0x04
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	fc 01       	movw	r30, r24
    17ba:	ea 57       	subi	r30, 0x7A	; 122
    17bc:	fe 4f       	sbci	r31, 0xFE	; 254
    17be:	31 83       	std	Z+1, r19	; 0x01
    17c0:	20 83       	st	Z, r18
			a_interruptData->eInterruptBehaviour;
	/************************************************************************
	 * switching between interrupts depending on the given configurations	*
	 ************************************************************************/
	if (eINT0 == a_interruptData->interruptSelect) {
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	80 81       	ld	r24, Z
    17c8:	88 23       	and	r24, r24
    17ca:	b1 f5       	brne	.+108    	; 0x1838 <eInterruptInit+0xa4>
		/********************************************************************************
		 * in this step we are configuring the interrupt sense control of interrupt0	*
		 * as in the given configurations by the user.									*
		 ********************************************************************************/
		a_interruptData->interruptSignalCapture &= 0x03;
    17cc:	e9 81       	ldd	r30, Y+1	; 0x01
    17ce:	fa 81       	ldd	r31, Y+2	; 0x02
    17d0:	81 81       	ldd	r24, Z+1	; 0x01
    17d2:	83 70       	andi	r24, 0x03	; 3
    17d4:	e9 81       	ldd	r30, Y+1	; 0x01
    17d6:	fa 81       	ldd	r31, Y+2	; 0x02
    17d8:	81 83       	std	Z+1, r24	; 0x01
		MCUCR = (MCUCR & 0xFD) | (a_interruptData->interruptSignalCapture);
    17da:	a5 e5       	ldi	r26, 0x55	; 85
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e5       	ldi	r30, 0x55	; 85
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	98 2f       	mov	r25, r24
    17e6:	9d 7f       	andi	r25, 0xFD	; 253
    17e8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ea:	fa 81       	ldd	r31, Y+2	; 0x02
    17ec:	81 81       	ldd	r24, Z+1	; 0x01
    17ee:	89 2b       	or	r24, r25
    17f0:	8c 93       	st	X, r24

		CLEAR_BIT(INT0_DDR, INT0_PIN); //Setting interrupt0 pin as input by writing logical 0
    17f2:	a1 e3       	ldi	r26, 0x31	; 49
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e1 e3       	ldi	r30, 0x31	; 49
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8b 7f       	andi	r24, 0xFB	; 251
    17fe:	8c 93       	st	X, r24
		SET_BIT(GICR, INT0); // Enabling interrupt0 in the general interrupt control register
    1800:	ab e5       	ldi	r26, 0x5B	; 91
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e5       	ldi	r30, 0x5B	; 91
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 64       	ori	r24, 0x40	; 64
    180c:	8c 93       	st	X, r24
		/****************************************************************
		 * Enabling interrupt0											*
		 *  internal pull up resistor depending on user configurations	*
		 ****************************************************************/
		a_interruptData->interruptPullUp &= 0x01;
    180e:	e9 81       	ldd	r30, Y+1	; 0x01
    1810:	fa 81       	ldd	r31, Y+2	; 0x02
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	81 70       	andi	r24, 0x01	; 1
    1816:	e9 81       	ldd	r30, Y+1	; 0x01
    1818:	fa 81       	ldd	r31, Y+2	; 0x02
    181a:	82 83       	std	Z+2, r24	; 0x02
		if (a_interruptData->interruptPullUp) {
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	88 23       	and	r24, r24
    1824:	09 f4       	brne	.+2      	; 0x1828 <eInterruptInit+0x94>
    1826:	8e c0       	rjmp	.+284    	; 0x1944 <eInterruptInit+0x1b0>
			SET_BIT(INT0_PORT, INT0_PIN);
    1828:	a2 e3       	ldi	r26, 0x32	; 50
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e2 e3       	ldi	r30, 0x32	; 50
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	84 60       	ori	r24, 0x04	; 4
    1834:	8c 93       	st	X, r24
    1836:	86 c0       	rjmp	.+268    	; 0x1944 <eInterruptInit+0x1b0>
		}

	} else if (eINT1 == a_interruptData->interruptSelect) {
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	80 81       	ld	r24, Z
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	e1 f5       	brne	.+120    	; 0x18ba <eInterruptInit+0x126>
		/********************************************************************************
		 * in this step we are configuring the interrupt sense control of interrupt1	*
		 * as in the given configurations by the user.									*
		 ********************************************************************************/

		a_interruptData->interruptSignalCapture &= 0x03;
    1842:	e9 81       	ldd	r30, Y+1	; 0x01
    1844:	fa 81       	ldd	r31, Y+2	; 0x02
    1846:	81 81       	ldd	r24, Z+1	; 0x01
    1848:	83 70       	andi	r24, 0x03	; 3
    184a:	e9 81       	ldd	r30, Y+1	; 0x01
    184c:	fa 81       	ldd	r31, Y+2	; 0x02
    184e:	81 83       	std	Z+1, r24	; 0x01

		MCUCR = (MCUCR & 0xF3)
    1850:	a5 e5       	ldi	r26, 0x55	; 85
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e5       	ldi	r30, 0x55	; 85
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	23 7f       	andi	r18, 0xF3	; 243
    185e:	e9 81       	ldd	r30, Y+1	; 0x01
    1860:	fa 81       	ldd	r31, Y+2	; 0x02
    1862:	81 81       	ldd	r24, Z+1	; 0x01
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	82 2b       	or	r24, r18
    1872:	8c 93       	st	X, r24
				| ((a_interruptData->interruptSignalCapture) << 2);

		CLEAR_BIT(INT1_DDR, INT1_PIN); //Setting interrupt1 pin as input by writing logical 0
    1874:	a1 e3       	ldi	r26, 0x31	; 49
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e1 e3       	ldi	r30, 0x31	; 49
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	87 7f       	andi	r24, 0xF7	; 247
    1880:	8c 93       	st	X, r24
		SET_BIT(GICR, INT1); // Enabling interrupt1 in the general interrupt control register
    1882:	ab e5       	ldi	r26, 0x5B	; 91
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	eb e5       	ldi	r30, 0x5B	; 91
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 68       	ori	r24, 0x80	; 128
    188e:	8c 93       	st	X, r24
		/****************************************************************
		 * Enabling interrupt1											*
		 *  internal pull up resistor depending on user configurations	*
		 ****************************************************************/
		a_interruptData->interruptPullUp &= 0x01;
    1890:	e9 81       	ldd	r30, Y+1	; 0x01
    1892:	fa 81       	ldd	r31, Y+2	; 0x02
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	81 70       	andi	r24, 0x01	; 1
    1898:	e9 81       	ldd	r30, Y+1	; 0x01
    189a:	fa 81       	ldd	r31, Y+2	; 0x02
    189c:	82 83       	std	Z+2, r24	; 0x02
		if (a_interruptData->interruptPullUp) {
    189e:	e9 81       	ldd	r30, Y+1	; 0x01
    18a0:	fa 81       	ldd	r31, Y+2	; 0x02
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	88 23       	and	r24, r24
    18a6:	09 f4       	brne	.+2      	; 0x18aa <eInterruptInit+0x116>
    18a8:	4d c0       	rjmp	.+154    	; 0x1944 <eInterruptInit+0x1b0>
			SET_BIT(INT1_PORT, INT1_PIN);
    18aa:	a2 e3       	ldi	r26, 0x32	; 50
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e2 e3       	ldi	r30, 0x32	; 50
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 60       	ori	r24, 0x08	; 8
    18b6:	8c 93       	st	X, r24
    18b8:	45 c0       	rjmp	.+138    	; 0x1944 <eInterruptInit+0x1b0>
		}

	} else if (eINT2 == a_interruptData->interruptSelect) {
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	80 81       	ld	r24, Z
    18c0:	82 30       	cpi	r24, 0x02	; 2
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <eInterruptInit+0x132>
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <eInterruptInit+0x1b0>
		/********************************************************************************
		 * in this step we are configuring the interrupt sense control of interrupt2	*
		 * as in the given configurations by the user.									*
		 ********************************************************************************/
		a_interruptData->interruptSignalCapture &= 0x01;
    18c6:	e9 81       	ldd	r30, Y+1	; 0x01
    18c8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ca:	81 81       	ldd	r24, Z+1	; 0x01
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	e9 81       	ldd	r30, Y+1	; 0x01
    18d0:	fa 81       	ldd	r31, Y+2	; 0x02
    18d2:	81 83       	std	Z+1, r24	; 0x01
		MCUCSR = (MCUCSR & 0xBF)
    18d4:	a4 e5       	ldi	r26, 0x54	; 84
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e4 e5       	ldi	r30, 0x54	; 84
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	2f 7b       	andi	r18, 0xBF	; 191
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	81 81       	ldd	r24, Z+1	; 0x01
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	00 24       	eor	r0, r0
    18ee:	96 95       	lsr	r25
    18f0:	87 95       	ror	r24
    18f2:	07 94       	ror	r0
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	07 94       	ror	r0
    18fa:	98 2f       	mov	r25, r24
    18fc:	80 2d       	mov	r24, r0
    18fe:	82 2b       	or	r24, r18
    1900:	8c 93       	st	X, r24
				| ((a_interruptData->interruptSignalCapture) << ISC2);

		CLEAR_BIT(INT2_DDR, INT2_PIN); //Setting interrupt2 pin as input by writing logical 0
    1902:	a7 e3       	ldi	r26, 0x37	; 55
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e7 e3       	ldi	r30, 0x37	; 55
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	8b 7f       	andi	r24, 0xFB	; 251
    190e:	8c 93       	st	X, r24
		SET_BIT(GICR, INT2); // Enabling interrupt2 in the general interrupt control register
    1910:	ab e5       	ldi	r26, 0x5B	; 91
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e5       	ldi	r30, 0x5B	; 91
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 62       	ori	r24, 0x20	; 32
    191c:	8c 93       	st	X, r24
		/****************************************************************
		 * Enabling interrupt2 											*
		 *  internal pull up resistor depending on user configurations	*
		 ****************************************************************/
		a_interruptData->interruptPullUp &= 0x01;
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	81 70       	andi	r24, 0x01	; 1
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	82 83       	std	Z+2, r24	; 0x02
		if (a_interruptData->interruptPullUp) {
    192c:	e9 81       	ldd	r30, Y+1	; 0x01
    192e:	fa 81       	ldd	r31, Y+2	; 0x02
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	88 23       	and	r24, r24
    1934:	39 f0       	breq	.+14     	; 0x1944 <eInterruptInit+0x1b0>
			SET_BIT(INT2_PORT, INT2_PIN);
    1936:	a8 e3       	ldi	r26, 0x38	; 56
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e8 e3       	ldi	r30, 0x38	; 56
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	84 60       	ori	r24, 0x04	; 4
    1942:	8c 93       	st	X, r24
		}

	}

}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <__vector_1>:
/************************************************************************************************
 *  Interrupt Service routine(s) for the driver to call back a given function					*
 * 																								*
 ************************************************************************************************/
ISR(INT0_vect) {
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
	(*g_eInterruptBehaviour[eINT0])(); // Calling back the given function for interrupt0
    1978:	e0 91 86 01 	lds	r30, 0x0186
    197c:	f0 91 87 01 	lds	r31, 0x0187
    1980:	09 95       	icall
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	7f 91       	pop	r23
    1994:	6f 91       	pop	r22
    1996:	5f 91       	pop	r21
    1998:	4f 91       	pop	r20
    199a:	3f 91       	pop	r19
    199c:	2f 91       	pop	r18
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <__vector_2>:

ISR(INT1_vect) {
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	11 24       	eor	r1, r1
    19b2:	2f 93       	push	r18
    19b4:	3f 93       	push	r19
    19b6:	4f 93       	push	r20
    19b8:	5f 93       	push	r21
    19ba:	6f 93       	push	r22
    19bc:	7f 93       	push	r23
    19be:	8f 93       	push	r24
    19c0:	9f 93       	push	r25
    19c2:	af 93       	push	r26
    19c4:	bf 93       	push	r27
    19c6:	ef 93       	push	r30
    19c8:	ff 93       	push	r31
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	(*g_eInterruptBehaviour[eINT1])(); // Calling back the given function for interrupt1
    19d2:	e0 91 88 01 	lds	r30, 0x0188
    19d6:	f0 91 89 01 	lds	r31, 0x0189
    19da:	09 95       	icall
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <__vector_18>:

ISR(INT2_vect) {
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	2f 93       	push	r18
    1a0e:	3f 93       	push	r19
    1a10:	4f 93       	push	r20
    1a12:	5f 93       	push	r21
    1a14:	6f 93       	push	r22
    1a16:	7f 93       	push	r23
    1a18:	8f 93       	push	r24
    1a1a:	9f 93       	push	r25
    1a1c:	af 93       	push	r26
    1a1e:	bf 93       	push	r27
    1a20:	ef 93       	push	r30
    1a22:	ff 93       	push	r31
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	(*g_eInterruptBehaviour[eINT2])(); // Calling back the given function for interrupt2
    1a2c:	e0 91 8a 01 	lds	r30, 0x018A
    1a30:	f0 91 8b 01 	lds	r31, 0x018B
    1a34:	09 95       	icall
}
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	ff 91       	pop	r31
    1a3c:	ef 91       	pop	r30
    1a3e:	bf 91       	pop	r27
    1a40:	af 91       	pop	r26
    1a42:	9f 91       	pop	r25
    1a44:	8f 91       	pop	r24
    1a46:	7f 91       	pop	r23
    1a48:	6f 91       	pop	r22
    1a4a:	5f 91       	pop	r21
    1a4c:	4f 91       	pop	r20
    1a4e:	3f 91       	pop	r19
    1a50:	2f 91       	pop	r18
    1a52:	0f 90       	pop	r0
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	0f 90       	pop	r0
    1a58:	1f 90       	pop	r1
    1a5a:	18 95       	reti

00001a5c <icuInit>:
 *      Author : Mohamad																		*
 ************************************************************************************************/

#include "icu.h"

void icuInit(const icuConfigData* a_icuConfig) {
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <icuInit+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01

}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <keypad_init>:
 */
static uint8 keypad_numberToAscii(uint8 a_KeypadNumber);
/*
 * functions definitions
 */
void keypad_init(void) {
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_COLS_DDR |= 0xf0; //initializing keypad column pins as output
    1a7c:	aa e3       	ldi	r26, 0x3A	; 58
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ea e3       	ldi	r30, 0x3A	; 58
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 6f       	ori	r24, 0xF0	; 240
    1a88:	8c 93       	st	X, r24
	KEYPAD_ROWS_DDR &= ~(0x0f); // initializing keypad rows as input
    1a8a:	aa e3       	ldi	r26, 0x3A	; 58
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ea e3       	ldi	r30, 0x3A	; 58
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	80 7f       	andi	r24, 0xF0	; 240
    1a96:	8c 93       	st	X, r24
	KEYPAD_ROWS_PORT |= (0x0f); // activating internal pull-up resistors on keypad rows
    1a98:	ab e3       	ldi	r26, 0x3B	; 59
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	eb e3       	ldi	r30, 0x3B	; 59
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 60       	ori	r24, 0x0F	; 15
    1aa4:	8c 93       	st	X, r24
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <keypad_getNumber>:
uint8 keypad_getNumber(void) {
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <keypad_getNumber+0x6>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
	uint8 a_rows = 0, a_cols = 0;
    1ab6:	1a 82       	std	Y+2, r1	; 0x02
    1ab8:	19 82       	std	Y+1, r1	; 0x01
	KEYPAD_COLS_PORT = 0b00001111;
    1aba:	eb e3       	ldi	r30, 0x3B	; 59
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8f e0       	ldi	r24, 0x0F	; 15
    1ac0:	80 83       	st	Z, r24
	while (TRUE) {
		for (a_cols = 0; a_cols < COLUMNS; a_cols++) {
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	52 c0       	rjmp	.+164    	; 0x1b6a <keypad_getNumber+0xbe>
			KEYPAD_COLS_DDR = (0b00010000 << a_cols);
    1ac6:	ea e3       	ldi	r30, 0x3A	; 58
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	80 e1       	ldi	r24, 0x10	; 16
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <keypad_getNumber+0x30>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <keypad_getNumber+0x2c>
    1ae0:	80 83       	st	Z, r24

			for (a_rows = 0; a_rows < ROWS; a_rows++) {
    1ae2:	1a 82       	std	Y+2, r1	; 0x02
    1ae4:	3b c0       	rjmp	.+118    	; 0x1b5c <keypad_getNumber+0xb0>

				if (!(KEYPAD_ROWS_PINS & (1 << a_rows))) {
    1ae6:	e9 e3       	ldi	r30, 0x39	; 57
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a9 01       	movw	r20, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <keypad_getNumber+0x52>
    1afa:	55 95       	asr	r21
    1afc:	47 95       	ror	r20
    1afe:	8a 95       	dec	r24
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <keypad_getNumber+0x4e>
    1b02:	ca 01       	movw	r24, r20
    1b04:	81 70       	andi	r24, 0x01	; 1
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	29 f5       	brne	.+74     	; 0x1b56 <keypad_getNumber+0xaa>
					while ((!(KEYPAD_ROWS_PINS & (1 << a_rows))))
    1b0c:	e9 e3       	ldi	r30, 0x39	; 57
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a9 01       	movw	r20, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <keypad_getNumber+0x78>
    1b20:	55 95       	asr	r21
    1b22:	47 95       	ror	r20
    1b24:	8a 95       	dec	r24
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <keypad_getNumber+0x74>
    1b28:	ca 01       	movw	r24, r20
    1b2a:	81 70       	andi	r24, 0x01	; 1
    1b2c:	90 70       	andi	r25, 0x00	; 0
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f3       	breq	.-38     	; 0x1b0c <keypad_getNumber+0x60>
						;
					return keypad_numberToAscii(
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	98 2f       	mov	r25, r24
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	89 0f       	add	r24, r25
    1b46:	8f 5f       	subi	r24, 0xFF	; 255
    1b48:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <keypad_numberToAscii>
				}
			}
		}
	}

}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret
	KEYPAD_COLS_PORT = 0b00001111;
	while (TRUE) {
		for (a_cols = 0; a_cols < COLUMNS; a_cols++) {
			KEYPAD_COLS_DDR = (0b00010000 << a_cols);

			for (a_rows = 0; a_rows < ROWS; a_rows++) {
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <keypad_getNumber+0xb8>
    1b62:	c1 cf       	rjmp	.-126    	; 0x1ae6 <keypad_getNumber+0x3a>
}
uint8 keypad_getNumber(void) {
	uint8 a_rows = 0, a_cols = 0;
	KEYPAD_COLS_PORT = 0b00001111;
	while (TRUE) {
		for (a_cols = 0; a_cols < COLUMNS; a_cols++) {
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	84 30       	cpi	r24, 0x04	; 4
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <keypad_getNumber+0xc6>
    1b70:	aa cf       	rjmp	.-172    	; 0x1ac6 <keypad_getNumber+0x1a>
    1b72:	a7 cf       	rjmp	.-178    	; 0x1ac2 <keypad_getNumber+0x16>

00001b74 <keypad_numberToAscii>:
			}
		}
	}

}
static uint8 keypad_numberToAscii(uint8 a_KeypadNumber) {
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <keypad_numberToAscii+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <keypad_numberToAscii+0x8>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	89 83       	std	Y+1, r24	; 0x01
#if (COLUMNS == 4)
	switch (a_KeypadNumber) {
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3c 83       	std	Y+4, r19	; 0x04
    1b8a:	2b 83       	std	Y+3, r18	; 0x03
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	91 05       	cpc	r25, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <keypad_numberToAscii+0x24>
    1b96:	70 c0       	rjmp	.+224    	; 0x1c78 <keypad_numberToAscii+0x104>
    1b98:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9c:	29 30       	cpi	r18, 0x09	; 9
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	5c f5       	brge	.+86     	; 0x1bf8 <keypad_numberToAscii+0x84>
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <keypad_numberToAscii+0x3a>
    1bac:	59 c0       	rjmp	.+178    	; 0x1c60 <keypad_numberToAscii+0xec>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	25 30       	cpi	r18, 0x05	; 5
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	9c f4       	brge	.+38     	; 0x1bde <keypad_numberToAscii+0x6a>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <keypad_numberToAscii+0x50>
    1bc2:	48 c0       	rjmp	.+144    	; 0x1c54 <keypad_numberToAscii+0xe0>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	23 30       	cpi	r18, 0x03	; 3
    1bca:	31 05       	cpc	r19, r1
    1bcc:	0c f0       	brlt	.+2      	; 0x1bd0 <keypad_numberToAscii+0x5c>
    1bce:	45 c0       	rjmp	.+138    	; 0x1c5a <keypad_numberToAscii+0xe6>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <keypad_numberToAscii+0x68>
    1bda:	39 c0       	rjmp	.+114    	; 0x1c4e <keypad_numberToAscii+0xda>
    1bdc:	68 c0       	rjmp	.+208    	; 0x1cae <keypad_numberToAscii+0x13a>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	26 30       	cpi	r18, 0x06	; 6
    1be4:	31 05       	cpc	r19, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <keypad_numberToAscii+0x76>
    1be8:	41 c0       	rjmp	.+130    	; 0x1c6c <keypad_numberToAscii+0xf8>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	87 30       	cpi	r24, 0x07	; 7
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	0c f0       	brlt	.+2      	; 0x1bf6 <keypad_numberToAscii+0x82>
    1bf4:	3e c0       	rjmp	.+124    	; 0x1c72 <keypad_numberToAscii+0xfe>
    1bf6:	37 c0       	rjmp	.+110    	; 0x1c66 <keypad_numberToAscii+0xf2>
    1bf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfc:	2c 30       	cpi	r18, 0x0C	; 12
    1bfe:	31 05       	cpc	r19, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <keypad_numberToAscii+0x90>
    1c02:	46 c0       	rjmp	.+140    	; 0x1c90 <keypad_numberToAscii+0x11c>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	8d 30       	cpi	r24, 0x0D	; 13
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	5c f4       	brge	.+22     	; 0x1c24 <keypad_numberToAscii+0xb0>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	2a 30       	cpi	r18, 0x0A	; 10
    1c14:	31 05       	cpc	r19, r1
    1c16:	b1 f1       	breq	.+108    	; 0x1c84 <keypad_numberToAscii+0x110>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	8b 30       	cpi	r24, 0x0B	; 11
    1c1e:	91 05       	cpc	r25, r1
    1c20:	a4 f5       	brge	.+104    	; 0x1c8a <keypad_numberToAscii+0x116>
    1c22:	2d c0       	rjmp	.+90     	; 0x1c7e <keypad_numberToAscii+0x10a>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	2e 30       	cpi	r18, 0x0E	; 14
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	b9 f1       	breq	.+110    	; 0x1c9c <keypad_numberToAscii+0x128>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	8e 30       	cpi	r24, 0x0E	; 14
    1c34:	91 05       	cpc	r25, r1
    1c36:	7c f1       	brlt	.+94     	; 0x1c96 <keypad_numberToAscii+0x122>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	2f 30       	cpi	r18, 0x0F	; 15
    1c3e:	31 05       	cpc	r19, r1
    1c40:	81 f1       	breq	.+96     	; 0x1ca2 <keypad_numberToAscii+0x12e>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	80 31       	cpi	r24, 0x10	; 16
    1c48:	91 05       	cpc	r25, r1
    1c4a:	71 f1       	breq	.+92     	; 0x1ca8 <keypad_numberToAscii+0x134>
    1c4c:	30 c0       	rjmp	.+96     	; 0x1cae <keypad_numberToAscii+0x13a>
	case 1:
		return '7';
    1c4e:	97 e3       	ldi	r25, 0x37	; 55
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	2f c0       	rjmp	.+94     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 2:
		return '8';
    1c54:	28 e3       	ldi	r18, 0x38	; 56
    1c56:	2a 83       	std	Y+2, r18	; 0x02
    1c58:	2c c0       	rjmp	.+88     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 3:
		return '9';
    1c5a:	39 e3       	ldi	r19, 0x39	; 57
    1c5c:	3a 83       	std	Y+2, r19	; 0x02
    1c5e:	29 c0       	rjmp	.+82     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 4:
		return '/';
    1c60:	8f e2       	ldi	r24, 0x2F	; 47
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	26 c0       	rjmp	.+76     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 5:
		return '4';
    1c66:	94 e3       	ldi	r25, 0x34	; 52
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	23 c0       	rjmp	.+70     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 6:
		return '5';
    1c6c:	25 e3       	ldi	r18, 0x35	; 53
    1c6e:	2a 83       	std	Y+2, r18	; 0x02
    1c70:	20 c0       	rjmp	.+64     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 7:
		return '6';
    1c72:	36 e3       	ldi	r19, 0x36	; 54
    1c74:	3a 83       	std	Y+2, r19	; 0x02
    1c76:	1d c0       	rjmp	.+58     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 8:
		return '*';
    1c78:	8a e2       	ldi	r24, 0x2A	; 42
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
    1c7c:	1a c0       	rjmp	.+52     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 9:
		return '1';
    1c7e:	91 e3       	ldi	r25, 0x31	; 49
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	17 c0       	rjmp	.+46     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 10:
		return '2';
    1c84:	22 e3       	ldi	r18, 0x32	; 50
    1c86:	2a 83       	std	Y+2, r18	; 0x02
    1c88:	14 c0       	rjmp	.+40     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 11:
		return '3';
    1c8a:	33 e3       	ldi	r19, 0x33	; 51
    1c8c:	3a 83       	std	Y+2, r19	; 0x02
    1c8e:	11 c0       	rjmp	.+34     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 12:
		return '-';
    1c90:	8d e2       	ldi	r24, 0x2D	; 45
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	0e c0       	rjmp	.+28     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 13:
		return a_KeypadNumber;
    1c96:	99 81       	ldd	r25, Y+1	; 0x01
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	0b c0       	rjmp	.+22     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 14:
		return '0';
    1c9c:	20 e3       	ldi	r18, 0x30	; 48
    1c9e:	2a 83       	std	Y+2, r18	; 0x02
    1ca0:	08 c0       	rjmp	.+16     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 15:
		return '=';
    1ca2:	3d e3       	ldi	r19, 0x3D	; 61
    1ca4:	3a 83       	std	Y+2, r19	; 0x02
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	case 16:
		return '+';
    1ca8:	8b e2       	ldi	r24, 0x2B	; 43
    1caa:	8a 83       	std	Y+2, r24	; 0x02
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <keypad_numberToAscii+0x13e>
		break;
	default:
		return 'E';
    1cae:	95 e4       	ldi	r25, 0x45	; 69
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
		case 12: return '#';
		break;
		default: return a_KeypadNumber;
	}
#endif
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <lcd_init>:

#include "lcd.h"
/*
 *
 */
void lcd_init(void) {
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	DATA_REG_DDR = 0xFF; /* Configure the data port as output port */
    1cca:	e4 e3       	ldi	r30, 0x34	; 52
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	80 83       	st	Z, r24
	CONTROL_REG_DDR |= (1 << EN) | (1 << RS) | (1 << RW); /* Configure the control pins(E,RS,RW) as output pins */
    1cd2:	a1 e3       	ldi	r26, 0x31	; 49
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e1 e3       	ldi	r30, 0x31	; 49
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 67       	ori	r24, 0x70	; 112
    1cde:	8c 93       	st	X, r24

	lcd_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ce0:	88 e3       	ldi	r24, 0x38	; 56
    1ce2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <lcd_sendCommand>

	lcd_sendCommand(CURSOR_OFF); /* cursor off */
    1ce6:	8c e0       	ldi	r24, 0x0C	; 12
    1ce8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <lcd_sendCommand>

	lcd_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <lcd_sendCommand>

}
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <lcd_sendCommand>:

void lcd_sendCommand(uint8 command) {
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	e9 97       	sbiw	r28, 0x39	; 57
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(CONTROL_REG, RS); /* Instruction Mode RS=0 */
    1d0e:	a2 e3       	ldi	r26, 0x32	; 50
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e2 e3       	ldi	r30, 0x32	; 50
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8f 7e       	andi	r24, 0xEF	; 239
    1d1a:	8c 93       	st	X, r24
	CLEAR_BIT(CONTROL_REG, RW); /* write data to LCD so RW=0 */
    1d1c:	a2 e3       	ldi	r26, 0x32	; 50
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e2 e3       	ldi	r30, 0x32	; 50
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8f 7d       	andi	r24, 0xDF	; 223
    1d28:	8c 93       	st	X, r24
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e8       	ldi	r26, 0x80	; 128
    1d30:	bf e3       	ldi	r27, 0x3F	; 63
    1d32:	8d ab       	std	Y+53, r24	; 0x35
    1d34:	9e ab       	std	Y+54, r25	; 0x36
    1d36:	af ab       	std	Y+55, r26	; 0x37
    1d38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d3c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d40:	98 ad       	ldd	r25, Y+56	; 0x38
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a e7       	ldi	r20, 0x7A	; 122
    1d48:	53 e4       	ldi	r21, 0x43	; 67
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	89 ab       	std	Y+49, r24	; 0x31
    1d54:	9a ab       	std	Y+50, r25	; 0x32
    1d56:	ab ab       	std	Y+51, r26	; 0x33
    1d58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d60:	9c a9       	ldd	r25, Y+52	; 0x34
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <lcd_sendCommand+0x84>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	98 ab       	std	Y+48, r25	; 0x30
    1d78:	8f a7       	std	Y+47, r24	; 0x2f
    1d7a:	3f c0       	rjmp	.+126    	; 0x1dfa <lcd_sendCommand+0x102>
	else if (__tmp > 65535)
    1d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d80:	8b a9       	ldd	r24, Y+51	; 0x33
    1d82:	9c a9       	ldd	r25, Y+52	; 0x34
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	4c f5       	brge	.+82     	; 0x1de6 <lcd_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d94:	6d a9       	ldd	r22, Y+53	; 0x35
    1d96:	7e a9       	ldd	r23, Y+54	; 0x36
    1d98:	8f a9       	ldd	r24, Y+55	; 0x37
    1d9a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e2       	ldi	r20, 0x20	; 32
    1da2:	51 e4       	ldi	r21, 0x41	; 65
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	98 ab       	std	Y+48, r25	; 0x30
    1dba:	8f a7       	std	Y+47, r24	; 0x2f
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <lcd_sendCommand+0xe4>
    1dbe:	89 e1       	ldi	r24, 0x19	; 25
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9e a7       	std	Y+46, r25	; 0x2e
    1dc4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <lcd_sendCommand+0xd2>
    1dce:	9e a7       	std	Y+46, r25	; 0x2e
    1dd0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	98 ab       	std	Y+48, r25	; 0x30
    1dda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dde:	98 a9       	ldd	r25, Y+48	; 0x30
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <lcd_sendCommand+0xc6>
    1de4:	14 c0       	rjmp	.+40     	; 0x1e0e <lcd_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	69 a9       	ldd	r22, Y+49	; 0x31
    1de8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dea:	8b a9       	ldd	r24, Y+51	; 0x33
    1dec:	9c a9       	ldd	r25, Y+52	; 0x34
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	98 ab       	std	Y+48, r25	; 0x30
    1df8:	8f a7       	std	Y+47, r24	; 0x2f
    1dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfe:	9c a7       	std	Y+44, r25	; 0x2c
    1e00:	8b a7       	std	Y+43, r24	; 0x2b
    1e02:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e04:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <lcd_sendCommand+0x10e>
    1e0a:	9c a7       	std	Y+44, r25	; 0x2c
    1e0c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(CONTROL_REG, EN); /* Enable LCD E=1 */
    1e0e:	a2 e3       	ldi	r26, 0x32	; 50
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e2 e3       	ldi	r30, 0x32	; 50
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 64       	ori	r24, 0x40	; 64
    1e1a:	8c 93       	st	X, r24
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e8       	ldi	r26, 0x80	; 128
    1e22:	bf e3       	ldi	r27, 0x3F	; 63
    1e24:	8f a3       	std	Y+39, r24	; 0x27
    1e26:	98 a7       	std	Y+40, r25	; 0x28
    1e28:	a9 a7       	std	Y+41, r26	; 0x29
    1e2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e30:	89 a5       	ldd	r24, Y+41	; 0x29
    1e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a e7       	ldi	r20, 0x7A	; 122
    1e3a:	53 e4       	ldi	r21, 0x43	; 67
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8b a3       	std	Y+35, r24	; 0x23
    1e46:	9c a3       	std	Y+36, r25	; 0x24
    1e48:	ad a3       	std	Y+37, r26	; 0x25
    1e4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e50:	8d a1       	ldd	r24, Y+37	; 0x25
    1e52:	9e a1       	ldd	r25, Y+38	; 0x26
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <lcd_sendCommand+0x176>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9a a3       	std	Y+34, r25	; 0x22
    1e6a:	89 a3       	std	Y+33, r24	; 0x21
    1e6c:	3f c0       	rjmp	.+126    	; 0x1eec <lcd_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e70:	7c a1       	ldd	r23, Y+36	; 0x24
    1e72:	8d a1       	ldd	r24, Y+37	; 0x25
    1e74:	9e a1       	ldd	r25, Y+38	; 0x26
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	4c f5       	brge	.+82     	; 0x1ed8 <lcd_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e86:	6f a1       	ldd	r22, Y+39	; 0x27
    1e88:	78 a5       	ldd	r23, Y+40	; 0x28
    1e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9a a3       	std	Y+34, r25	; 0x22
    1eac:	89 a3       	std	Y+33, r24	; 0x21
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <lcd_sendCommand+0x1d6>
    1eb0:	89 e1       	ldi	r24, 0x19	; 25
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	98 a3       	std	Y+32, r25	; 0x20
    1eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eba:	98 a1       	ldd	r25, Y+32	; 0x20
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <lcd_sendCommand+0x1c4>
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9a a3       	std	Y+34, r25	; 0x22
    1ecc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	69 f7       	brne	.-38     	; 0x1eb0 <lcd_sendCommand+0x1b8>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <lcd_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9a a3       	std	Y+34, r25	; 0x22
    1eea:	89 a3       	std	Y+33, r24	; 0x21
    1eec:	89 a1       	ldd	r24, Y+33	; 0x21
    1eee:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <lcd_sendCommand+0x200>
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	DATA_REG = command; /* out the required command to the data bus D0 --> D7 */
    1f00:	e5 e3       	ldi	r30, 0x35	; 53
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	89 ad       	ldd	r24, Y+57	; 0x39
    1f06:	80 83       	st	Z, r24
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e8       	ldi	r26, 0x80	; 128
    1f0e:	bf e3       	ldi	r27, 0x3F	; 63
    1f10:	89 8f       	std	Y+25, r24	; 0x19
    1f12:	9a 8f       	std	Y+26, r25	; 0x1a
    1f14:	ab 8f       	std	Y+27, r26	; 0x1b
    1f16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	69 8d       	ldd	r22, Y+25	; 0x19
    1f1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a e7       	ldi	r20, 0x7A	; 122
    1f26:	53 e4       	ldi	r21, 0x43	; 67
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8d 8b       	std	Y+21, r24	; 0x15
    1f32:	9e 8b       	std	Y+22, r25	; 0x16
    1f34:	af 8b       	std	Y+23, r26	; 0x17
    1f36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <lcd_sendCommand+0x262>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9c 8b       	std	Y+20, r25	; 0x14
    1f56:	8b 8b       	std	Y+19, r24	; 0x13
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <lcd_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f60:	98 8d       	ldd	r25, Y+24	; 0x18
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <lcd_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	69 8d       	ldd	r22, Y+25	; 0x19
    1f74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9c 8b       	std	Y+20, r25	; 0x14
    1f98:	8b 8b       	std	Y+19, r24	; 0x13
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <lcd_sendCommand+0x2c2>
    1f9c:	89 e1       	ldi	r24, 0x19	; 25
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9a 8b       	std	Y+18, r25	; 0x12
    1fa2:	89 8b       	std	Y+17, r24	; 0x11
    1fa4:	89 89       	ldd	r24, Y+17	; 0x11
    1fa6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <lcd_sendCommand+0x2b0>
    1fac:	9a 8b       	std	Y+18, r25	; 0x12
    1fae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <lcd_sendCommand+0x2a4>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <lcd_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
    1fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fda:	9c 89       	ldd	r25, Y+20	; 0x14
    1fdc:	98 8b       	std	Y+16, r25	; 0x10
    1fde:	8f 87       	std	Y+15, r24	; 0x0f
    1fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe2:	98 89       	ldd	r25, Y+16	; 0x10
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <lcd_sendCommand+0x2ec>
    1fe8:	98 8b       	std	Y+16, r25	; 0x10
    1fea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(CONTROL_REG, EN); /* disable LCD E=0 */
    1fec:	a2 e3       	ldi	r26, 0x32	; 50
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e2 e3       	ldi	r30, 0x32	; 50
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	8f 7b       	andi	r24, 0xBF	; 191
    1ff8:	8c 93       	st	X, r24
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e8       	ldi	r26, 0x80	; 128
    2000:	bf e3       	ldi	r27, 0x3F	; 63
    2002:	8b 87       	std	Y+11, r24	; 0x0b
    2004:	9c 87       	std	Y+12, r25	; 0x0c
    2006:	ad 87       	std	Y+13, r26	; 0x0d
    2008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200a:	6b 85       	ldd	r22, Y+11	; 0x0b
    200c:	7c 85       	ldd	r23, Y+12	; 0x0c
    200e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2010:	9e 85       	ldd	r25, Y+14	; 0x0e
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	4a e7       	ldi	r20, 0x7A	; 122
    2018:	53 e4       	ldi	r21, 0x43	; 67
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	8f 83       	std	Y+7, r24	; 0x07
    2024:	98 87       	std	Y+8, r25	; 0x08
    2026:	a9 87       	std	Y+9, r26	; 0x09
    2028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202a:	6f 81       	ldd	r22, Y+7	; 0x07
    202c:	78 85       	ldd	r23, Y+8	; 0x08
    202e:	89 85       	ldd	r24, Y+9	; 0x09
    2030:	9a 85       	ldd	r25, Y+10	; 0x0a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e8       	ldi	r20, 0x80	; 128
    2038:	5f e3       	ldi	r21, 0x3F	; 63
    203a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    203e:	88 23       	and	r24, r24
    2040:	2c f4       	brge	.+10     	; 0x204c <lcd_sendCommand+0x354>
		__ticks = 1;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	3f c0       	rjmp	.+126    	; 0x20ca <lcd_sendCommand+0x3d2>
	else if (__tmp > 65535)
    204c:	6f 81       	ldd	r22, Y+7	; 0x07
    204e:	78 85       	ldd	r23, Y+8	; 0x08
    2050:	89 85       	ldd	r24, Y+9	; 0x09
    2052:	9a 85       	ldd	r25, Y+10	; 0x0a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	3f ef       	ldi	r19, 0xFF	; 255
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	57 e4       	ldi	r21, 0x47	; 71
    205c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2060:	18 16       	cp	r1, r24
    2062:	4c f5       	brge	.+82     	; 0x20b6 <lcd_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2064:	6b 85       	ldd	r22, Y+11	; 0x0b
    2066:	7c 85       	ldd	r23, Y+12	; 0x0c
    2068:	8d 85       	ldd	r24, Y+13	; 0x0d
    206a:	9e 85       	ldd	r25, Y+14	; 0x0e
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <lcd_sendCommand+0x3b4>
    208e:	89 e1       	ldi	r24, 0x19	; 25
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <lcd_sendCommand+0x3a2>
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	69 f7       	brne	.-38     	; 0x208e <lcd_sendCommand+0x396>
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <lcd_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	6f 81       	ldd	r22, Y+7	; 0x07
    20b8:	78 85       	ldd	r23, Y+8	; 0x08
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <lcd_sendCommand+0x3de>
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    20de:	e9 96       	adiw	r28, 0x39	; 57
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <lcd_displayCharacter>:

void lcd_displayCharacter(uint8 data) {
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	e9 97       	sbiw	r28, 0x39	; 57
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(CONTROL_REG, RS); /* Instruction Mode RS=1 */
    2106:	a2 e3       	ldi	r26, 0x32	; 50
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e2 e3       	ldi	r30, 0x32	; 50
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	80 61       	ori	r24, 0x10	; 16
    2112:	8c 93       	st	X, r24
	CLEAR_BIT(CONTROL_REG, RW); /* write data to LCD so RW=0 */
    2114:	a2 e3       	ldi	r26, 0x32	; 50
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e2 e3       	ldi	r30, 0x32	; 50
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	8f 7d       	andi	r24, 0xDF	; 223
    2120:	8c 93       	st	X, r24
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e8       	ldi	r26, 0x80	; 128
    2128:	bf e3       	ldi	r27, 0x3F	; 63
    212a:	8d ab       	std	Y+53, r24	; 0x35
    212c:	9e ab       	std	Y+54, r25	; 0x36
    212e:	af ab       	std	Y+55, r26	; 0x37
    2130:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	6d a9       	ldd	r22, Y+53	; 0x35
    2134:	7e a9       	ldd	r23, Y+54	; 0x36
    2136:	8f a9       	ldd	r24, Y+55	; 0x37
    2138:	98 ad       	ldd	r25, Y+56	; 0x38
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a e7       	ldi	r20, 0x7A	; 122
    2140:	53 e4       	ldi	r21, 0x43	; 67
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	89 ab       	std	Y+49, r24	; 0x31
    214c:	9a ab       	std	Y+50, r25	; 0x32
    214e:	ab ab       	std	Y+51, r26	; 0x33
    2150:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2152:	69 a9       	ldd	r22, Y+49	; 0x31
    2154:	7a a9       	ldd	r23, Y+50	; 0x32
    2156:	8b a9       	ldd	r24, Y+51	; 0x33
    2158:	9c a9       	ldd	r25, Y+52	; 0x34
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <lcd_displayCharacter+0x84>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	98 ab       	std	Y+48, r25	; 0x30
    2170:	8f a7       	std	Y+47, r24	; 0x2f
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <lcd_displayCharacter+0x102>
	else if (__tmp > 65535)
    2174:	69 a9       	ldd	r22, Y+49	; 0x31
    2176:	7a a9       	ldd	r23, Y+50	; 0x32
    2178:	8b a9       	ldd	r24, Y+51	; 0x33
    217a:	9c a9       	ldd	r25, Y+52	; 0x34
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <lcd_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	6d a9       	ldd	r22, Y+53	; 0x35
    218e:	7e a9       	ldd	r23, Y+54	; 0x36
    2190:	8f a9       	ldd	r24, Y+55	; 0x37
    2192:	98 ad       	ldd	r25, Y+56	; 0x38
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	98 ab       	std	Y+48, r25	; 0x30
    21b2:	8f a7       	std	Y+47, r24	; 0x2f
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <lcd_displayCharacter+0xe4>
    21b6:	89 e1       	ldi	r24, 0x19	; 25
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9e a7       	std	Y+46, r25	; 0x2e
    21bc:	8d a7       	std	Y+45, r24	; 0x2d
    21be:	8d a5       	ldd	r24, Y+45	; 0x2d
    21c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <lcd_displayCharacter+0xd2>
    21c6:	9e a7       	std	Y+46, r25	; 0x2e
    21c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    21cc:	98 a9       	ldd	r25, Y+48	; 0x30
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d6:	98 a9       	ldd	r25, Y+48	; 0x30
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <lcd_displayCharacter+0xc6>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <lcd_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	69 a9       	ldd	r22, Y+49	; 0x31
    21e0:	7a a9       	ldd	r23, Y+50	; 0x32
    21e2:	8b a9       	ldd	r24, Y+51	; 0x33
    21e4:	9c a9       	ldd	r25, Y+52	; 0x34
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f4:	98 a9       	ldd	r25, Y+48	; 0x30
    21f6:	9c a7       	std	Y+44, r25	; 0x2c
    21f8:	8b a7       	std	Y+43, r24	; 0x2b
    21fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <lcd_displayCharacter+0x10e>
    2202:	9c a7       	std	Y+44, r25	; 0x2c
    2204:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(CONTROL_REG, EN); /* Enable LCD E=1 */
    2206:	a2 e3       	ldi	r26, 0x32	; 50
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e2 e3       	ldi	r30, 0x32	; 50
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 64       	ori	r24, 0x40	; 64
    2212:	8c 93       	st	X, r24
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	8f a3       	std	Y+39, r24	; 0x27
    221e:	98 a7       	std	Y+40, r25	; 0x28
    2220:	a9 a7       	std	Y+41, r26	; 0x29
    2222:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6f a1       	ldd	r22, Y+39	; 0x27
    2226:	78 a5       	ldd	r23, Y+40	; 0x28
    2228:	89 a5       	ldd	r24, Y+41	; 0x29
    222a:	9a a5       	ldd	r25, Y+42	; 0x2a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	53 e4       	ldi	r21, 0x43	; 67
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8b a3       	std	Y+35, r24	; 0x23
    223e:	9c a3       	std	Y+36, r25	; 0x24
    2240:	ad a3       	std	Y+37, r26	; 0x25
    2242:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <lcd_displayCharacter+0x176>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9a a3       	std	Y+34, r25	; 0x22
    2262:	89 a3       	std	Y+33, r24	; 0x21
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <lcd_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2266:	6b a1       	ldd	r22, Y+35	; 0x23
    2268:	7c a1       	ldd	r23, Y+36	; 0x24
    226a:	8d a1       	ldd	r24, Y+37	; 0x25
    226c:	9e a1       	ldd	r25, Y+38	; 0x26
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <lcd_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6f a1       	ldd	r22, Y+39	; 0x27
    2280:	78 a5       	ldd	r23, Y+40	; 0x28
    2282:	89 a5       	ldd	r24, Y+41	; 0x29
    2284:	9a a5       	ldd	r25, Y+42	; 0x2a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <lcd_displayCharacter+0x1d6>
    22a8:	89 e1       	ldi	r24, 0x19	; 25
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	98 a3       	std	Y+32, r25	; 0x20
    22ae:	8f 8f       	std	Y+31, r24	; 0x1f
    22b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b2:	98 a1       	ldd	r25, Y+32	; 0x20
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <lcd_displayCharacter+0x1c4>
    22b8:	98 a3       	std	Y+32, r25	; 0x20
    22ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	89 a1       	ldd	r24, Y+33	; 0x21
    22be:	9a a1       	ldd	r25, Y+34	; 0x22
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	89 a1       	ldd	r24, Y+33	; 0x21
    22c8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <lcd_displayCharacter+0x1b8>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <lcd_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6b a1       	ldd	r22, Y+35	; 0x23
    22d2:	7c a1       	ldd	r23, Y+36	; 0x24
    22d4:	8d a1       	ldd	r24, Y+37	; 0x25
    22d6:	9e a1       	ldd	r25, Y+38	; 0x26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9a a3       	std	Y+34, r25	; 0x22
    22e2:	89 a3       	std	Y+33, r24	; 0x21
    22e4:	89 a1       	ldd	r24, Y+33	; 0x21
    22e6:	9a a1       	ldd	r25, Y+34	; 0x22
    22e8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ea:	8d 8f       	std	Y+29, r24	; 0x1d
    22ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <lcd_displayCharacter+0x200>
    22f4:	9e 8f       	std	Y+30, r25	; 0x1e
    22f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	DATA_REG = data; /* out the required command to the data bus D0 --> D7 */
    22f8:	e5 e3       	ldi	r30, 0x35	; 53
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	89 ad       	ldd	r24, Y+57	; 0x39
    22fe:	80 83       	st	Z, r24
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e8       	ldi	r26, 0x80	; 128
    2306:	bf e3       	ldi	r27, 0x3F	; 63
    2308:	89 8f       	std	Y+25, r24	; 0x19
    230a:	9a 8f       	std	Y+26, r25	; 0x1a
    230c:	ab 8f       	std	Y+27, r26	; 0x1b
    230e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	69 8d       	ldd	r22, Y+25	; 0x19
    2312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	53 e4       	ldi	r21, 0x43	; 67
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8d 8b       	std	Y+21, r24	; 0x15
    232a:	9e 8b       	std	Y+22, r25	; 0x16
    232c:	af 8b       	std	Y+23, r26	; 0x17
    232e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <lcd_displayCharacter+0x262>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 8b       	std	Y+20, r25	; 0x14
    234e:	8b 8b       	std	Y+19, r24	; 0x13
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <lcd_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2352:	6d 89       	ldd	r22, Y+21	; 0x15
    2354:	7e 89       	ldd	r23, Y+22	; 0x16
    2356:	8f 89       	ldd	r24, Y+23	; 0x17
    2358:	98 8d       	ldd	r25, Y+24	; 0x18
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <lcd_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <lcd_displayCharacter+0x2c2>
    2394:	89 e1       	ldi	r24, 0x19	; 25
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9a 8b       	std	Y+18, r25	; 0x12
    239a:	89 8b       	std	Y+17, r24	; 0x11
    239c:	89 89       	ldd	r24, Y+17	; 0x11
    239e:	9a 89       	ldd	r25, Y+18	; 0x12
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <lcd_displayCharacter+0x2b0>
    23a4:	9a 8b       	std	Y+18, r25	; 0x12
    23a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8b 89       	ldd	r24, Y+19	; 0x13
    23aa:	9c 89       	ldd	r25, Y+20	; 0x14
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9c 8b       	std	Y+20, r25	; 0x14
    23b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8b 89       	ldd	r24, Y+19	; 0x13
    23b4:	9c 89       	ldd	r25, Y+20	; 0x14
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <lcd_displayCharacter+0x2a4>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <lcd_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6d 89       	ldd	r22, Y+21	; 0x15
    23be:	7e 89       	ldd	r23, Y+22	; 0x16
    23c0:	8f 89       	ldd	r24, Y+23	; 0x17
    23c2:	98 8d       	ldd	r25, Y+24	; 0x18
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
    23d0:	8b 89       	ldd	r24, Y+19	; 0x13
    23d2:	9c 89       	ldd	r25, Y+20	; 0x14
    23d4:	98 8b       	std	Y+16, r25	; 0x10
    23d6:	8f 87       	std	Y+15, r24	; 0x0f
    23d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23da:	98 89       	ldd	r25, Y+16	; 0x10
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <lcd_displayCharacter+0x2ec>
    23e0:	98 8b       	std	Y+16, r25	; 0x10
    23e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(CONTROL_REG, EN); /* disable LCD E=0 */
    23e4:	a2 e3       	ldi	r26, 0x32	; 50
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e2 e3       	ldi	r30, 0x32	; 50
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	8f 7b       	andi	r24, 0xBF	; 191
    23f0:	8c 93       	st	X, r24
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e8       	ldi	r26, 0x80	; 128
    23f8:	bf e3       	ldi	r27, 0x3F	; 63
    23fa:	8b 87       	std	Y+11, r24	; 0x0b
    23fc:	9c 87       	std	Y+12, r25	; 0x0c
    23fe:	ad 87       	std	Y+13, r26	; 0x0d
    2400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	6b 85       	ldd	r22, Y+11	; 0x0b
    2404:	7c 85       	ldd	r23, Y+12	; 0x0c
    2406:	8d 85       	ldd	r24, Y+13	; 0x0d
    2408:	9e 85       	ldd	r25, Y+14	; 0x0e
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a e7       	ldi	r20, 0x7A	; 122
    2410:	53 e4       	ldi	r21, 0x43	; 67
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8f 83       	std	Y+7, r24	; 0x07
    241c:	98 87       	std	Y+8, r25	; 0x08
    241e:	a9 87       	std	Y+9, r26	; 0x09
    2420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <lcd_displayCharacter+0x354>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <lcd_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <lcd_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	6b 85       	ldd	r22, Y+11	; 0x0b
    245e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2460:	8d 85       	ldd	r24, Y+13	; 0x0d
    2462:	9e 85       	ldd	r25, Y+14	; 0x0e
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9e 83       	std	Y+6, r25	; 0x06
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <lcd_displayCharacter+0x3b4>
    2486:	89 e1       	ldi	r24, 0x19	; 25
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <lcd_displayCharacter+0x3a2>
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <lcd_displayCharacter+0x396>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <lcd_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <lcd_displayCharacter+0x3de>
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    24d6:	e9 96       	adiw	r28, 0x39	; 57
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <lcd_displayString>:

void lcd_displayString(const int8 * string) {
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <lcd_displayString+0x6>
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	0a c0       	rjmp	.+20     	; 0x250c <lcd_displayString+0x24>
	while ((*string) != '\0') {
		lcd_displayCharacter((*string));
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	80 81       	ld	r24, Z
    24fe:	0e 94 78 10 	call	0x20f0	; 0x20f0 <lcd_displayCharacter>
		string++;
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(CONTROL_REG, EN); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
}

void lcd_displayString(const int8 * string) {
	while ((*string) != '\0') {
    250c:	e9 81       	ldd	r30, Y+1	; 0x01
    250e:	fa 81       	ldd	r31, Y+2	; 0x02
    2510:	80 81       	ld	r24, Z
    2512:	88 23       	and	r24, r24
    2514:	89 f7       	brne	.-30     	; 0x24f8 <lcd_displayString+0x10>
		lcd_displayCharacter((*string));
		string++;
	}

}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <lcd_goToRowColumn>:

void lcd_goToRowColumn(uint8 row, uint8 col) {
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <lcd_goToRowColumn+0x6>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <lcd_goToRowColumn+0x8>
    2528:	0f 92       	push	r0
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch (row) {
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	3d 83       	std	Y+5, r19	; 0x05
    253a:	2c 83       	std	Y+4, r18	; 0x04
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	9d 81       	ldd	r25, Y+5	; 0x05
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	91 05       	cpc	r25, r1
    2544:	c1 f0       	breq	.+48     	; 0x2576 <lcd_goToRowColumn+0x56>
    2546:	2c 81       	ldd	r18, Y+4	; 0x04
    2548:	3d 81       	ldd	r19, Y+5	; 0x05
    254a:	22 30       	cpi	r18, 0x02	; 2
    254c:	31 05       	cpc	r19, r1
    254e:	2c f4       	brge	.+10     	; 0x255a <lcd_goToRowColumn+0x3a>
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	9d 81       	ldd	r25, Y+5	; 0x05
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	61 f0       	breq	.+24     	; 0x2570 <lcd_goToRowColumn+0x50>
    2558:	19 c0       	rjmp	.+50     	; 0x258c <lcd_goToRowColumn+0x6c>
    255a:	2c 81       	ldd	r18, Y+4	; 0x04
    255c:	3d 81       	ldd	r19, Y+5	; 0x05
    255e:	22 30       	cpi	r18, 0x02	; 2
    2560:	31 05       	cpc	r19, r1
    2562:	69 f0       	breq	.+26     	; 0x257e <lcd_goToRowColumn+0x5e>
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	9d 81       	ldd	r25, Y+5	; 0x05
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	91 05       	cpc	r25, r1
    256c:	61 f0       	breq	.+24     	; 0x2586 <lcd_goToRowColumn+0x66>
    256e:	0e c0       	rjmp	.+28     	; 0x258c <lcd_goToRowColumn+0x6c>
	case 0:
		Address = col;
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	0b c0       	rjmp	.+22     	; 0x258c <lcd_goToRowColumn+0x6c>
		break;
	case 1:
		Address = col + 0x40;
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	80 5c       	subi	r24, 0xC0	; 192
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	07 c0       	rjmp	.+14     	; 0x258c <lcd_goToRowColumn+0x6c>
		break;
	case 2:
		Address = col + 0x10;
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	80 5f       	subi	r24, 0xF0	; 240
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	03 c0       	rjmp	.+6      	; 0x258c <lcd_goToRowColumn+0x6c>
		break;
	case 3:
		Address = col + 0x50;
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	80 5b       	subi	r24, 0xB0	; 176
    258a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	lcd_sendCommand(Address | SET_CURSOR_LOCATION);
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	80 68       	ori	r24, 0x80	; 128
    2590:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <lcd_sendCommand>
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <lcd_displayStringRowColumn>:

void lcd_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <lcd_displayStringRowColumn+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <lcd_displayStringRowColumn+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	6a 83       	std	Y+2, r22	; 0x02
    25b4:	5c 83       	std	Y+4, r21	; 0x04
    25b6:	4b 83       	std	Y+3, r20	; 0x03
	lcd_goToRowColumn(row, col); /* go to to the required LCD position */
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	6a 81       	ldd	r22, Y+2	; 0x02
    25bc:	0e 94 90 12 	call	0x2520	; 0x2520 <lcd_goToRowColumn>
	lcd_displayString(Str); /* display the string */
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <lcd_displayString>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <lcd_integerToString>:

void lcd_integerToString(uint64 data) {
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	68 97       	sbiw	r28, 0x18	; 24
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	29 8b       	std	Y+17, r18	; 0x11
    25ec:	3a 8b       	std	Y+18, r19	; 0x12
    25ee:	4b 8b       	std	Y+19, r20	; 0x13
    25f0:	5c 8b       	std	Y+20, r21	; 0x14
    25f2:	6d 8b       	std	Y+21, r22	; 0x15
    25f4:	7e 8b       	std	Y+22, r23	; 0x16
    25f6:	8f 8b       	std	Y+23, r24	; 0x17
    25f8:	98 8f       	std	Y+24, r25	; 0x18
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* 10 for decimal */
    25fa:	89 89       	ldd	r24, Y+17	; 0x11
    25fc:	9a 89       	ldd	r25, Y+18	; 0x12
    25fe:	9e 01       	movw	r18, r28
    2600:	2f 5f       	subi	r18, 0xFF	; 255
    2602:	3f 4f       	sbci	r19, 0xFF	; 255
    2604:	b9 01       	movw	r22, r18
    2606:	4a e0       	ldi	r20, 0x0A	; 10
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <itoa>
	lcd_displayString(buff);
    260e:	ce 01       	movw	r24, r28
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	0e 94 74 12 	call	0x24e8	; 0x24e8 <lcd_displayString>
}
    2616:	68 96       	adiw	r28, 0x18	; 24
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <lcd_clear>:
void lcd_clear(void) {
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	lcd_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <lcd_sendCommand>
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <setLED>:
 *      Author: Mohamad
 */

#include "led.h"

void setLED(LED* a_LED) {
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <setLED+0x6>
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
	*((volatile uint8*) (a_LED->LED_Port) - 1) |= (1 << a_LED->LED_Pin); //setting given LED pin as output
    264a:	e9 81       	ldd	r30, Y+1	; 0x01
    264c:	fa 81       	ldd	r31, Y+2	; 0x02
    264e:	80 81       	ld	r24, Z
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	dc 01       	movw	r26, r24
    2658:	e9 81       	ldd	r30, Y+1	; 0x01
    265a:	fa 81       	ldd	r31, Y+2	; 0x02
    265c:	80 81       	ld	r24, Z
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	fc 01       	movw	r30, r24
    2666:	80 81       	ld	r24, Z
    2668:	48 2f       	mov	r20, r24
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	81 81       	ldd	r24, Z+1	; 0x01
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	02 c0       	rjmp	.+4      	; 0x267e <setLED+0x42>
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	2a 95       	dec	r18
    2680:	e2 f7       	brpl	.-8      	; 0x267a <setLED+0x3e>
    2682:	84 2b       	or	r24, r20
    2684:	8c 93       	st	X, r24

	offLED(a_LED); //setting the LED off as initial value
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	0e 94 9e 13 	call	0x273c	; 0x273c <offLED>
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <onLED>:
void onLED(LED* a_LED) {
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	00 d0       	rcall	.+0      	; 0x269e <onLED+0x6>
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
	if (a_LED->LED_Activity == Active_High) {
    26a6:	e9 81       	ldd	r30, Y+1	; 0x01
    26a8:	fa 81       	ldd	r31, Y+2	; 0x02
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	f1 f4       	brne	.+60     	; 0x26ec <onLED+0x54>

		SET_BIT((*((volatile uint8* )(a_LED->LED_Port))), a_LED->LED_Pin);
    26b0:	e9 81       	ldd	r30, Y+1	; 0x01
    26b2:	fa 81       	ldd	r31, Y+2	; 0x02
    26b4:	80 81       	ld	r24, Z
    26b6:	88 2f       	mov	r24, r24
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	dc 01       	movw	r26, r24
    26bc:	e9 81       	ldd	r30, Y+1	; 0x01
    26be:	fa 81       	ldd	r31, Y+2	; 0x02
    26c0:	80 81       	ld	r24, Z
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	fc 01       	movw	r30, r24
    26c8:	80 81       	ld	r24, Z
    26ca:	48 2f       	mov	r20, r24
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	81 81       	ldd	r24, Z+1	; 0x01
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <onLED+0x4a>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <onLED+0x46>
    26e6:	84 2b       	or	r24, r20
    26e8:	8c 93       	st	X, r24
    26ea:	23 c0       	rjmp	.+70     	; 0x2732 <onLED+0x9a>
	} else if (a_LED->LED_Activity == Active_Low) {
    26ec:	e9 81       	ldd	r30, Y+1	; 0x01
    26ee:	fa 81       	ldd	r31, Y+2	; 0x02
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	88 23       	and	r24, r24
    26f4:	f1 f4       	brne	.+60     	; 0x2732 <onLED+0x9a>
		CLEAR_BIT((*((volatile uint8* )(a_LED->LED_Port))), a_LED->LED_Pin);
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	fa 81       	ldd	r31, Y+2	; 0x02
    26fa:	80 81       	ld	r24, Z
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	dc 01       	movw	r26, r24
    2702:	e9 81       	ldd	r30, Y+1	; 0x01
    2704:	fa 81       	ldd	r31, Y+2	; 0x02
    2706:	80 81       	ld	r24, Z
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	fc 01       	movw	r30, r24
    270e:	80 81       	ld	r24, Z
    2710:	48 2f       	mov	r20, r24
    2712:	e9 81       	ldd	r30, Y+1	; 0x01
    2714:	fa 81       	ldd	r31, Y+2	; 0x02
    2716:	81 81       	ldd	r24, Z+1	; 0x01
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	02 2e       	mov	r0, r18
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <onLED+0x90>
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <onLED+0x8c>
    272c:	80 95       	com	r24
    272e:	84 23       	and	r24, r20
    2730:	8c 93       	st	X, r24
	}
}
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <offLED>:

void offLED(LED* a_LED) {
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	00 d0       	rcall	.+0      	; 0x2742 <offLED+0x6>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01
	if (a_LED->LED_Activity == Active_High) {
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	f9 f4       	brne	.+62     	; 0x2792 <offLED+0x56>

		CLEAR_BIT((*((volatile uint8* )(a_LED->LED_Port))), a_LED->LED_Pin);
    2754:	e9 81       	ldd	r30, Y+1	; 0x01
    2756:	fa 81       	ldd	r31, Y+2	; 0x02
    2758:	80 81       	ld	r24, Z
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	dc 01       	movw	r26, r24
    2760:	e9 81       	ldd	r30, Y+1	; 0x01
    2762:	fa 81       	ldd	r31, Y+2	; 0x02
    2764:	80 81       	ld	r24, Z
    2766:	88 2f       	mov	r24, r24
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	fc 01       	movw	r30, r24
    276c:	80 81       	ld	r24, Z
    276e:	48 2f       	mov	r20, r24
    2770:	e9 81       	ldd	r30, Y+1	; 0x01
    2772:	fa 81       	ldd	r31, Y+2	; 0x02
    2774:	81 81       	ldd	r24, Z+1	; 0x01
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	02 2e       	mov	r0, r18
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <offLED+0x4a>
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	0a 94       	dec	r0
    2788:	e2 f7       	brpl	.-8      	; 0x2782 <offLED+0x46>
    278a:	80 95       	com	r24
    278c:	84 23       	and	r24, r20
    278e:	8c 93       	st	X, r24
    2790:	22 c0       	rjmp	.+68     	; 0x27d6 <offLED+0x9a>
	} else if (a_LED->LED_Activity == Active_Low) {
    2792:	e9 81       	ldd	r30, Y+1	; 0x01
    2794:	fa 81       	ldd	r31, Y+2	; 0x02
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	88 23       	and	r24, r24
    279a:	e9 f4       	brne	.+58     	; 0x27d6 <offLED+0x9a>
		SET_BIT((*((volatile uint8* )(a_LED->LED_Port))), a_LED->LED_Pin);
    279c:	e9 81       	ldd	r30, Y+1	; 0x01
    279e:	fa 81       	ldd	r31, Y+2	; 0x02
    27a0:	80 81       	ld	r24, Z
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	dc 01       	movw	r26, r24
    27a8:	e9 81       	ldd	r30, Y+1	; 0x01
    27aa:	fa 81       	ldd	r31, Y+2	; 0x02
    27ac:	80 81       	ld	r24, Z
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	fc 01       	movw	r30, r24
    27b4:	80 81       	ld	r24, Z
    27b6:	48 2f       	mov	r20, r24
    27b8:	e9 81       	ldd	r30, Y+1	; 0x01
    27ba:	fa 81       	ldd	r31, Y+2	; 0x02
    27bc:	81 81       	ldd	r24, Z+1	; 0x01
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	02 2e       	mov	r0, r18
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <offLED+0x92>
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	0a 94       	dec	r0
    27d0:	e2 f7       	brpl	.-8      	; 0x27ca <offLED+0x8e>
    27d2:	84 2b       	or	r24, r20
    27d4:	8c 93       	st	X, r24
	}
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <toggleLED>:

void toggleLED(LED* a_LED) {
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <toggleLED+0x6>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
	TOGGLE_BIT((*((volatile uint8* )(a_LED->LED_Port))), a_LED->LED_Pin);
    27ee:	e9 81       	ldd	r30, Y+1	; 0x01
    27f0:	fa 81       	ldd	r31, Y+2	; 0x02
    27f2:	80 81       	ld	r24, Z
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	dc 01       	movw	r26, r24
    27fa:	e9 81       	ldd	r30, Y+1	; 0x01
    27fc:	fa 81       	ldd	r31, Y+2	; 0x02
    27fe:	80 81       	ld	r24, Z
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	fc 01       	movw	r30, r24
    2806:	80 81       	ld	r24, Z
    2808:	48 2f       	mov	r20, r24
    280a:	e9 81       	ldd	r30, Y+1	; 0x01
    280c:	fa 81       	ldd	r31, Y+2	; 0x02
    280e:	81 81       	ldd	r24, Z+1	; 0x01
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	02 2e       	mov	r0, r18
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <toggleLED+0x40>
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	0a 94       	dec	r0
    2822:	e2 f7       	brpl	.-8      	; 0x281c <toggleLED+0x3c>
    2824:	84 27       	eor	r24, r20
    2826:	8c 93       	st	X, r24
}
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <calculate_temperature>:
 * Variable type : LED																			*
 * Variable function : declaring and initializing variable of type LED with led configurations	*
 ************************************************************************************************/
dcMotorData motor1 = { dcMPORTB, dcMPin3, mDiPORTB, mDiPin4 };
pwmConfig pwm1 = { pwmT0, pwm_64, 0 };
void calculate_temperature(uint16 a_analogVal) {
    2832:	af 92       	push	r10
    2834:	bf 92       	push	r11
    2836:	cf 92       	push	r12
    2838:	df 92       	push	r13
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	00 d0       	rcall	.+0      	; 0x2848 <calculate_temperature+0x16>
    2848:	00 d0       	rcall	.+0      	; 0x284a <calculate_temperature+0x18>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
	 * 2V ----> 2/5 * 1023 = 410
	 * 410 --->140*C
	 *  R ----> ??*C
	 *  T = (R/410)*140
	 */
	uint16 temperature = (a_analogVal * 100) / 1023;
    2852:	2b 81       	ldd	r18, Y+3	; 0x03
    2854:	3c 81       	ldd	r19, Y+4	; 0x04
    2856:	84 e6       	ldi	r24, 0x64	; 100
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	ac 01       	movw	r20, r24
    285c:	24 9f       	mul	r18, r20
    285e:	c0 01       	movw	r24, r0
    2860:	25 9f       	mul	r18, r21
    2862:	90 0d       	add	r25, r0
    2864:	34 9f       	mul	r19, r20
    2866:	90 0d       	add	r25, r0
    2868:	11 24       	eor	r1, r1
    286a:	2f ef       	ldi	r18, 0xFF	; 255
    286c:	33 e0       	ldi	r19, 0x03	; 3
    286e:	b9 01       	movw	r22, r18
    2870:	0e 94 67 17 	call	0x2ece	; 0x2ece <__udivmodhi4>
    2874:	cb 01       	movw	r24, r22
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	lcd_goToRowColumn(0, 0);
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	0e 94 90 12 	call	0x2520	; 0x2520 <lcd_goToRowColumn>
	lcd_integerToString(temperature);
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	5c 01       	movw	r10, r24
    2888:	cc 24       	eor	r12, r12
    288a:	dd 24       	eor	r13, r13
    288c:	ee 24       	eor	r14, r14
    288e:	ff 24       	eor	r15, r15
    2890:	87 01       	movw	r16, r14
    2892:	2a 2d       	mov	r18, r10
    2894:	3b 2d       	mov	r19, r11
    2896:	4c 2d       	mov	r20, r12
    2898:	5d 2d       	mov	r21, r13
    289a:	6e 2d       	mov	r22, r14
    289c:	7f 2d       	mov	r23, r15
    289e:	80 2f       	mov	r24, r16
    28a0:	91 2f       	mov	r25, r17
    28a2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <lcd_integerToString>
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	ff 90       	pop	r15
    28b8:	ef 90       	pop	r14
    28ba:	df 90       	pop	r13
    28bc:	cf 90       	pop	r12
    28be:	bf 90       	pop	r11
    28c0:	af 90       	pop	r10
    28c2:	08 95       	ret

000028c4 <displaySpeed>:

void displaySpeed(uint16 a_analogVal) {
    28c4:	af 92       	push	r10
    28c6:	bf 92       	push	r11
    28c8:	cf 92       	push	r12
    28ca:	df 92       	push	r13
    28cc:	ef 92       	push	r14
    28ce:	ff 92       	push	r15
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <displaySpeed+0x16>
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
	pwm1.pwmDuty = ((float) a_analogVal / 1023) * 100;
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	cc 01       	movw	r24, r24
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 ec       	ldi	r19, 0xC0	; 192
    2900:	4f e7       	ldi	r20, 0x7F	; 127
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	48 ec       	ldi	r20, 0xC8	; 200
    2916:	52 e4       	ldi	r21, 0x42	; 66
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	80 93 76 01 	sts	0x0176, r24
	pwmChangeDuty(&pwm1);
    2930:	84 e7       	ldi	r24, 0x74	; 116
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	0e 94 04 17 	call	0x2e08	; 0x2e08 <pwmChangeDuty>
	lcd_goToRowColumn(0, 7);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	67 e0       	ldi	r22, 0x07	; 7
    293c:	0e 94 90 12 	call	0x2520	; 0x2520 <lcd_goToRowColumn>
	lcd_integerToString(a_analogVal);
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	9a 81       	ldd	r25, Y+2	; 0x02
    2944:	5c 01       	movw	r10, r24
    2946:	cc 24       	eor	r12, r12
    2948:	dd 24       	eor	r13, r13
    294a:	ee 24       	eor	r14, r14
    294c:	ff 24       	eor	r15, r15
    294e:	87 01       	movw	r16, r14
    2950:	2a 2d       	mov	r18, r10
    2952:	3b 2d       	mov	r19, r11
    2954:	4c 2d       	mov	r20, r12
    2956:	5d 2d       	mov	r21, r13
    2958:	6e 2d       	mov	r22, r14
    295a:	7f 2d       	mov	r23, r15
    295c:	80 2f       	mov	r24, r16
    295e:	91 2f       	mov	r25, r17
    2960:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <lcd_integerToString>
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
    2978:	bf 90       	pop	r11
    297a:	af 90       	pop	r10
    297c:	08 95       	ret

0000297e <interruptBehaviour>:

void interruptBehaviour(void) {
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	dcMotorRev(&motor1);
    2986:	80 e7       	ldi	r24, 0x70	; 112
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <dcMotorRev>
}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <main>:
int main(void) {
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	66 97       	sbiw	r28, 0x16	; 22
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
	ADC_DATA adc1 = { AREF, Enabled, Right, ADC0, _8, &displaySpeed };
    29a8:	ce 01       	movw	r24, r28
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	9e 87       	std	Y+14, r25	; 0x0e
    29ae:	8d 87       	std	Y+13, r24	; 0x0d
    29b0:	ec e7       	ldi	r30, 0x7C	; 124
    29b2:	f1 e0       	ldi	r31, 0x01	; 1
    29b4:	f8 8b       	std	Y+16, r31	; 0x10
    29b6:	ef 87       	std	Y+15, r30	; 0x0f
    29b8:	f7 e0       	ldi	r31, 0x07	; 7
    29ba:	f9 8b       	std	Y+17, r31	; 0x11
    29bc:	ef 85       	ldd	r30, Y+15	; 0x0f
    29be:	f8 89       	ldd	r31, Y+16	; 0x10
    29c0:	00 80       	ld	r0, Z
    29c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c4:	98 89       	ldd	r25, Y+16	; 0x10
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	98 8b       	std	Y+16, r25	; 0x10
    29ca:	8f 87       	std	Y+15, r24	; 0x0f
    29cc:	ed 85       	ldd	r30, Y+13	; 0x0d
    29ce:	fe 85       	ldd	r31, Y+14	; 0x0e
    29d0:	00 82       	st	Z, r0
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	9e 87       	std	Y+14, r25	; 0x0e
    29da:	8d 87       	std	Y+13, r24	; 0x0d
    29dc:	99 89       	ldd	r25, Y+17	; 0x11
    29de:	91 50       	subi	r25, 0x01	; 1
    29e0:	99 8b       	std	Y+17, r25	; 0x11
    29e2:	e9 89       	ldd	r30, Y+17	; 0x11
    29e4:	ee 23       	and	r30, r30
    29e6:	51 f7       	brne	.-44     	; 0x29bc <main+0x28>
	eInterruptData eint0 = { eINT1, ActiveRising, intPupDisabled,
			&interruptBehaviour };
    29e8:	ce 01       	movw	r24, r28
    29ea:	08 96       	adiw	r24, 0x08	; 8
    29ec:	9b 8b       	std	Y+19, r25	; 0x13
    29ee:	8a 8b       	std	Y+18, r24	; 0x12
    29f0:	e7 e7       	ldi	r30, 0x77	; 119
    29f2:	f1 e0       	ldi	r31, 0x01	; 1
    29f4:	fd 8b       	std	Y+21, r31	; 0x15
    29f6:	ec 8b       	std	Y+20, r30	; 0x14
    29f8:	f5 e0       	ldi	r31, 0x05	; 5
    29fa:	fe 8b       	std	Y+22, r31	; 0x16
    29fc:	ec 89       	ldd	r30, Y+20	; 0x14
    29fe:	fd 89       	ldd	r31, Y+21	; 0x15
    2a00:	00 80       	ld	r0, Z
    2a02:	8c 89       	ldd	r24, Y+20	; 0x14
    2a04:	9d 89       	ldd	r25, Y+21	; 0x15
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	9d 8b       	std	Y+21, r25	; 0x15
    2a0a:	8c 8b       	std	Y+20, r24	; 0x14
    2a0c:	ea 89       	ldd	r30, Y+18	; 0x12
    2a0e:	fb 89       	ldd	r31, Y+19	; 0x13
    2a10:	00 82       	st	Z, r0
    2a12:	8a 89       	ldd	r24, Y+18	; 0x12
    2a14:	9b 89       	ldd	r25, Y+19	; 0x13
    2a16:	01 96       	adiw	r24, 0x01	; 1
    2a18:	9b 8b       	std	Y+19, r25	; 0x13
    2a1a:	8a 8b       	std	Y+18, r24	; 0x12
    2a1c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a1e:	91 50       	subi	r25, 0x01	; 1
    2a20:	9e 8b       	std	Y+22, r25	; 0x16
    2a22:	ee 89       	ldd	r30, Y+22	; 0x16
    2a24:	ee 23       	and	r30, r30
    2a26:	51 f7       	brne	.-44     	; 0x29fc <main+0x68>

	/****************************************************************************
	 * initializing all drivers for the project depending on user configs		*
	 *
	 ****************************************************************************/
	lcd_init(); //initializing LCD driver
    2a28:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <lcd_init>
	lcd_displayString("Speed: "); // giving constant string at the beginning of the program
    2a2c:	80 e6       	ldi	r24, 0x60	; 96
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 74 12 	call	0x24e8	; 0x24e8 <lcd_displayString>
	adc_init(&adc1); //initializing adc on configurations of adc1
    2a34:	ce 01       	movw	r24, r28
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	0e 94 75 07 	call	0xeea	; 0xeea <adc_init>
	dcMotorInit(&motor1); // setting up a motor on motor1 configurations
    2a3c:	80 e7       	ldi	r24, 0x70	; 112
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	0e 94 19 0a 	call	0x1432	; 0x1432 <dcMotorInit>
	eInterruptInit(&eint0); // initializing external interrupts driver based on eint0 configurations
    2a44:	ce 01       	movw	r24, r28
    2a46:	08 96       	adiw	r24, 0x08	; 8
    2a48:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eInterruptInit>
	pwmInit(&pwm1); // initializing pwm based on pwm1 configurations
    2a4c:	84 e7       	ldi	r24, 0x74	; 116
    2a4e:	91 e0       	ldi	r25, 0x01	; 1
    2a50:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <pwmInit>
	sei();
    2a54:	78 94       	sei
	//Enabling global interrupts

	while (1) {
		adc_start(&adc1); // starting adc conversion on adc1 configurations
    2a56:	ce 01       	movw	r24, r28
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	0e 94 20 08 	call	0x1040	; 0x1040 <adc_start>
    2a5e:	fb cf       	rjmp	.-10     	; 0x2a56 <main+0xc2>

00002a60 <setPushButton>:
 *      Author: Mohamad
 */

#include "pushButton.h"

void setPushButton(pushButton* a_pushButton) {
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <setPushButton+0x6>
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_BIT((*(volatile uint8*)( (a_pushButton->pbPort)-1 + SHIFT)),
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	80 81       	ld	r24, Z
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	4f 96       	adiw	r24, 0x1f	; 31
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a80:	80 81       	ld	r24, Z
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	4f 96       	adiw	r24, 0x1f	; 31
    2a88:	fc 01       	movw	r30, r24
    2a8a:	80 81       	ld	r24, Z
    2a8c:	48 2f       	mov	r20, r24
    2a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a90:	fa 81       	ldd	r31, Y+2	; 0x02
    2a92:	81 81       	ldd	r24, Z+1	; 0x01
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	02 2e       	mov	r0, r18
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <setPushButton+0x44>
    2aa0:	88 0f       	add	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	0a 94       	dec	r0
    2aa6:	e2 f7       	brpl	.-8      	; 0x2aa0 <setPushButton+0x40>
    2aa8:	80 95       	com	r24
    2aaa:	84 23       	and	r24, r20
    2aac:	8c 93       	st	X, r24
			a_pushButton->pbPin); // setting the pin as input pin
	if (1 == a_pushButton->pb_pullupStatus) { //if the internal pull-up resistor is requested
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	81 30       	cpi	r24, 0x01	; 1
    2ab6:	a9 f4       	brne	.+42     	; 0x2ae2 <setPushButton+0x82>
		SET_BIT(PORTA, a_pushButton->pbPin); // Enabling the internal pull-up resistor
    2ab8:	ab e3       	ldi	r26, 0x3B	; 59
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	eb e3       	ldi	r30, 0x3B	; 59
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac8:	81 81       	ldd	r24, Z+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	02 2e       	mov	r0, r18
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <setPushButton+0x7a>
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	0a 94       	dec	r0
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <setPushButton+0x76>
    2ade:	84 2b       	or	r24, r20
    2ae0:	8c 93       	st	X, r24
	}
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <readPushButton>:
uint8 readPushButton(pushButton* a_pushButton) {
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	64 97       	sbiw	r28, 0x14	; 20
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	9b 8b       	std	Y+19, r25	; 0x13
    2b02:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 a_currentStatus = 0;
    2b04:	19 8a       	std	Y+17, r1	; 0x11
	volatile uint8* a_Port =
			(volatile uint8*) (a_pushButton->pbPort + SHIFT - 2);
    2b06:	ea 89       	ldd	r30, Y+18	; 0x12
    2b08:	fb 89       	ldd	r31, Y+19	; 0x13
    2b0a:	80 81       	ld	r24, Z
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	4e 96       	adiw	r24, 0x1e	; 30
    2b12:	98 8b       	std	Y+16, r25	; 0x10
    2b14:	8f 87       	std	Y+15, r24	; 0x0f
	a_currentStatus = (((*a_Port) & (1 << a_pushButton->pbPin))
    2b16:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b18:	f8 89       	ldd	r31, Y+16	; 0x10
    2b1a:	80 81       	ld	r24, Z
    2b1c:	48 2f       	mov	r20, r24
    2b1e:	50 e0       	ldi	r21, 0x00	; 0
    2b20:	ea 89       	ldd	r30, Y+18	; 0x12
    2b22:	fb 89       	ldd	r31, Y+19	; 0x13
    2b24:	81 81       	ldd	r24, Z+1	; 0x01
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <readPushButton+0x48>
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	2a 95       	dec	r18
    2b36:	e2 f7       	brpl	.-8      	; 0x2b30 <readPushButton+0x44>
    2b38:	9a 01       	movw	r18, r20
    2b3a:	28 23       	and	r18, r24
    2b3c:	39 23       	and	r19, r25
    2b3e:	ea 89       	ldd	r30, Y+18	; 0x12
    2b40:	fb 89       	ldd	r31, Y+19	; 0x13
    2b42:	81 81       	ldd	r24, Z+1	; 0x01
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a9 01       	movw	r20, r18
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <readPushButton+0x64>
    2b4c:	55 95       	asr	r21
    2b4e:	47 95       	ror	r20
    2b50:	8a 95       	dec	r24
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <readPushButton+0x60>
    2b54:	ca 01       	movw	r24, r20
    2b56:	89 8b       	std	Y+17, r24	; 0x11
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a8 e4       	ldi	r26, 0x48	; 72
    2b5e:	b2 e4       	ldi	r27, 0x42	; 66
    2b60:	8b 87       	std	Y+11, r24	; 0x0b
    2b62:	9c 87       	std	Y+12, r25	; 0x0c
    2b64:	ad 87       	std	Y+13, r26	; 0x0d
    2b66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a e7       	ldi	r20, 0x7A	; 122
    2b76:	53 e4       	ldi	r21, 0x43	; 67
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8f 83       	std	Y+7, r24	; 0x07
    2b82:	98 87       	std	Y+8, r25	; 0x08
    2b84:	a9 87       	std	Y+9, r26	; 0x09
    2b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b88:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8a:	78 85       	ldd	r23, Y+8	; 0x08
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <readPushButton+0xbe>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <readPushButton+0x13c>
	else if (__tmp > 65535)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <readPushButton+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <readPushButton+0x11e>
    2bec:	89 e1       	ldi	r24, 0x19	; 25
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	8b 83       	std	Y+3, r24	; 0x03
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <readPushButton+0x10c>
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <readPushButton+0x100>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <readPushButton+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	78 85       	ldd	r23, Y+8	; 0x08
    2c18:	89 85       	ldd	r24, Y+9	; 0x09
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <readPushButton+0x148>
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01
			>> a_pushButton->pbPin);
	_delay_ms(50);
	if (a_currentStatus
    2c3c:	89 89       	ldd	r24, Y+17	; 0x11
    2c3e:	68 2f       	mov	r22, r24
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	ef 85       	ldd	r30, Y+15	; 0x0f
    2c44:	f8 89       	ldd	r31, Y+16	; 0x10
    2c46:	80 81       	ld	r24, Z
    2c48:	48 2f       	mov	r20, r24
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	ea 89       	ldd	r30, Y+18	; 0x12
    2c4e:	fb 89       	ldd	r31, Y+19	; 0x13
    2c50:	81 81       	ldd	r24, Z+1	; 0x01
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <readPushButton+0x174>
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	2a 95       	dec	r18
    2c62:	e2 f7       	brpl	.-8      	; 0x2c5c <readPushButton+0x170>
    2c64:	9a 01       	movw	r18, r20
    2c66:	28 23       	and	r18, r24
    2c68:	39 23       	and	r19, r25
    2c6a:	ea 89       	ldd	r30, Y+18	; 0x12
    2c6c:	fb 89       	ldd	r31, Y+19	; 0x13
    2c6e:	81 81       	ldd	r24, Z+1	; 0x01
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a9 01       	movw	r20, r18
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <readPushButton+0x190>
    2c78:	55 95       	asr	r21
    2c7a:	47 95       	ror	r20
    2c7c:	8a 95       	dec	r24
    2c7e:	e2 f7       	brpl	.-8      	; 0x2c78 <readPushButton+0x18c>
    2c80:	ca 01       	movw	r24, r20
    2c82:	68 17       	cp	r22, r24
    2c84:	79 07       	cpc	r23, r25
    2c86:	19 f4       	brne	.+6      	; 0x2c8e <readPushButton+0x1a2>
			== (((*a_Port) & (1 << a_pushButton->pbPin)) >> a_pushButton->pbPin)) {
		return a_currentStatus;
    2c88:	59 89       	ldd	r21, Y+17	; 0x11
    2c8a:	5c 8b       	std	Y+20, r21	; 0x14
    2c8c:	21 c0       	rjmp	.+66     	; 0x2cd0 <readPushButton+0x1e4>
	}
	return (((*a_Port) & (1 << a_pushButton->pbPin)) >> a_pushButton->pbPin);
    2c8e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2c90:	f8 89       	ldd	r31, Y+16	; 0x10
    2c92:	80 81       	ld	r24, Z
    2c94:	48 2f       	mov	r20, r24
    2c96:	50 e0       	ldi	r21, 0x00	; 0
    2c98:	ea 89       	ldd	r30, Y+18	; 0x12
    2c9a:	fb 89       	ldd	r31, Y+19	; 0x13
    2c9c:	81 81       	ldd	r24, Z+1	; 0x01
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <readPushButton+0x1c0>
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	2a 95       	dec	r18
    2cae:	e2 f7       	brpl	.-8      	; 0x2ca8 <readPushButton+0x1bc>
    2cb0:	9a 01       	movw	r18, r20
    2cb2:	28 23       	and	r18, r24
    2cb4:	39 23       	and	r19, r25
    2cb6:	ea 89       	ldd	r30, Y+18	; 0x12
    2cb8:	fb 89       	ldd	r31, Y+19	; 0x13
    2cba:	81 81       	ldd	r24, Z+1	; 0x01
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a9 01       	movw	r20, r18
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <readPushButton+0x1dc>
    2cc4:	55 95       	asr	r21
    2cc6:	47 95       	ror	r20
    2cc8:	8a 95       	dec	r24
    2cca:	e2 f7       	brpl	.-8      	; 0x2cc4 <readPushButton+0x1d8>
    2ccc:	ca 01       	movw	r24, r20
    2cce:	8c 8b       	std	Y+20, r24	; 0x14
    2cd0:	8c 89       	ldd	r24, Y+20	; 0x14
}
    2cd2:	64 96       	adiw	r28, 0x14	; 20
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <pwmInit>:
 * FOCnPWM = the frequency on the pwm pin which is output compare pin to the specified timer	*
 *    fclk = the MCU frequency																	*
 *       N = the prescaler factor form 2 to 1024												*
 ************************************************************************************************/

void pwmInit(pwmConfig * a_pwmConfig) {
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <pwmInit+0xa>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
	switch (a_pwmConfig->pwmTimer) {
    2cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	d9 f5       	brne	.+118    	; 0x2d7a <pwmInit+0x96>
	case 0: // Timer0
		/****************************************************************************************
		 * configuring timer0 to work on fast pwm with clear timer on compare event and set at 0*
		 ****************************************************************************************/
		TCCR0 |= (1 << WGM01) | (1 << WGM00) | (1 << COM01);
    2d04:	a3 e5       	ldi	r26, 0x53	; 83
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e3 e5       	ldi	r30, 0x53	; 83
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	88 66       	ori	r24, 0x68	; 104
    2d10:	8c 93       	st	X, r24
		TCNT0 = 0; // starting the count from zero
    2d12:	e2 e5       	ldi	r30, 0x52	; 82
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	10 82       	st	Z, r1
		OCR0 = (a_pwmConfig->pwmDuty / (float) 100) * (255); // giving the duty cycle to the timer
    2d18:	0c e5       	ldi	r16, 0x5C	; 92
    2d1a:	10 e0       	ldi	r17, 0x00	; 0
    2d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	aa 27       	eor	r26, r26
    2d28:	97 fd       	sbrc	r25, 7
    2d2a:	a0 95       	com	r26
    2d2c:	ba 2f       	mov	r27, r26
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	48 ec       	ldi	r20, 0xC8	; 200
    2d44:	52 e4       	ldi	r21, 0x42	; 66
    2d46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4f e7       	ldi	r20, 0x7F	; 127
    2d58:	53 e4       	ldi	r21, 0x43	; 67
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	f8 01       	movw	r30, r16
    2d70:	80 83       	st	Z, r24
		pwmStart(a_pwmConfig); // starting pwm on the given configurations
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
    2d76:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <pwmStart>
	case 1: // Timer1
		break;
	case 2: // Timer2
		break;
	}
}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	08 95       	ret

00002d88 <pwmStart>:

void pwmStart(pwmConfig * a_pwmConfig) {
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <pwmStart+0x6>
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	89 83       	std	Y+1, r24	; 0x01
	switch (a_pwmConfig->pwmTimer) {
    2d96:	e9 81       	ldd	r30, Y+1	; 0x01
    2d98:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	99 f4       	brne	.+38     	; 0x2dca <pwmStart+0x42>
	case 0: // Timer0
		a_pwmConfig->pwmPrescaler &= 0b00000111;
    2da4:	e9 81       	ldd	r30, Y+1	; 0x01
    2da6:	fa 81       	ldd	r31, Y+2	; 0x02
    2da8:	81 81       	ldd	r24, Z+1	; 0x01
    2daa:	87 70       	andi	r24, 0x07	; 7
    2dac:	e9 81       	ldd	r30, Y+1	; 0x01
    2dae:	fa 81       	ldd	r31, Y+2	; 0x02
    2db0:	81 83       	std	Z+1, r24	; 0x01
		TCCR0 = (TCCR0 & 0xF8) | a_pwmConfig->pwmPrescaler;
    2db2:	a3 e5       	ldi	r26, 0x53	; 83
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	e3 e5       	ldi	r30, 0x53	; 83
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	98 7f       	andi	r25, 0xF8	; 248
    2dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc4:	81 81       	ldd	r24, Z+1	; 0x01
    2dc6:	89 2b       	or	r24, r25
    2dc8:	8c 93       	st	X, r24
	case 1: // Timer1
		break;
	case 2: // Timer2
		break;
	}
}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <pwmStop>:

void pwmStop(pwmConfig * a_pwmConfig) {
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <pwmStop+0x6>
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
	switch (a_pwmConfig->pwmTimer) {
    2de2:	e9 81       	ldd	r30, Y+1	; 0x01
    2de4:	fa 81       	ldd	r31, Y+2	; 0x02
    2de6:	80 81       	ld	r24, Z
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	39 f4       	brne	.+14     	; 0x2dfe <pwmStop+0x2a>
	case 0: // Timer0
		TCCR0 = (TCCR0 & 0xF8); // Turning off the clock for the timer
    2df0:	a3 e5       	ldi	r26, 0x53	; 83
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e3 e5       	ldi	r30, 0x53	; 83
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	88 7f       	andi	r24, 0xF8	; 248
    2dfc:	8c 93       	st	X, r24
	case 1: // Timer1
		break;
	case 2: // Timer2
		break;
	}
}
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <pwmChangeDuty>:
void pwmChangeDuty(pwmConfig * a_pwmConfig) {
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <pwmChangeDuty+0xa>
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
	switch (a_pwmConfig->pwmTimer) {
    2e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1e:	80 81       	ld	r24, Z
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	69 f5       	brne	.+90     	; 0x2e82 <pwmChangeDuty+0x7a>
	case 0: // Timer0
		OCR0 = (a_pwmConfig->pwmDuty / (float) 100) * (255); // giving the duty cycle to the timer
    2e28:	0c e5       	ldi	r16, 0x5C	; 92
    2e2a:	10 e0       	ldi	r17, 0x00	; 0
    2e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	aa 27       	eor	r26, r26
    2e38:	97 fd       	sbrc	r25, 7
    2e3a:	a0 95       	com	r26
    2e3c:	ba 2f       	mov	r27, r26
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	48 ec       	ldi	r20, 0xC8	; 200
    2e54:	52 e4       	ldi	r21, 0x42	; 66
    2e56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	53 e4       	ldi	r21, 0x43	; 67
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	f8 01       	movw	r30, r16
    2e80:	80 83       	st	Z, r24
	case 1: // Timer1
		break;
	case 2: // Timer2
		break;
	}
}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	08 95       	ret

00002e90 <__mulsi3>:
    2e90:	62 9f       	mul	r22, r18
    2e92:	d0 01       	movw	r26, r0
    2e94:	73 9f       	mul	r23, r19
    2e96:	f0 01       	movw	r30, r0
    2e98:	82 9f       	mul	r24, r18
    2e9a:	e0 0d       	add	r30, r0
    2e9c:	f1 1d       	adc	r31, r1
    2e9e:	64 9f       	mul	r22, r20
    2ea0:	e0 0d       	add	r30, r0
    2ea2:	f1 1d       	adc	r31, r1
    2ea4:	92 9f       	mul	r25, r18
    2ea6:	f0 0d       	add	r31, r0
    2ea8:	83 9f       	mul	r24, r19
    2eaa:	f0 0d       	add	r31, r0
    2eac:	74 9f       	mul	r23, r20
    2eae:	f0 0d       	add	r31, r0
    2eb0:	65 9f       	mul	r22, r21
    2eb2:	f0 0d       	add	r31, r0
    2eb4:	99 27       	eor	r25, r25
    2eb6:	72 9f       	mul	r23, r18
    2eb8:	b0 0d       	add	r27, r0
    2eba:	e1 1d       	adc	r30, r1
    2ebc:	f9 1f       	adc	r31, r25
    2ebe:	63 9f       	mul	r22, r19
    2ec0:	b0 0d       	add	r27, r0
    2ec2:	e1 1d       	adc	r30, r1
    2ec4:	f9 1f       	adc	r31, r25
    2ec6:	bd 01       	movw	r22, r26
    2ec8:	cf 01       	movw	r24, r30
    2eca:	11 24       	eor	r1, r1
    2ecc:	08 95       	ret

00002ece <__udivmodhi4>:
    2ece:	aa 1b       	sub	r26, r26
    2ed0:	bb 1b       	sub	r27, r27
    2ed2:	51 e1       	ldi	r21, 0x11	; 17
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <__udivmodhi4_ep>

00002ed6 <__udivmodhi4_loop>:
    2ed6:	aa 1f       	adc	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	a6 17       	cp	r26, r22
    2edc:	b7 07       	cpc	r27, r23
    2ede:	10 f0       	brcs	.+4      	; 0x2ee4 <__udivmodhi4_ep>
    2ee0:	a6 1b       	sub	r26, r22
    2ee2:	b7 0b       	sbc	r27, r23

00002ee4 <__udivmodhi4_ep>:
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	5a 95       	dec	r21
    2eea:	a9 f7       	brne	.-22     	; 0x2ed6 <__udivmodhi4_loop>
    2eec:	80 95       	com	r24
    2eee:	90 95       	com	r25
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	08 95       	ret

00002ef6 <__udivmodsi4>:
    2ef6:	a1 e2       	ldi	r26, 0x21	; 33
    2ef8:	1a 2e       	mov	r1, r26
    2efa:	aa 1b       	sub	r26, r26
    2efc:	bb 1b       	sub	r27, r27
    2efe:	fd 01       	movw	r30, r26
    2f00:	0d c0       	rjmp	.+26     	; 0x2f1c <__udivmodsi4_ep>

00002f02 <__udivmodsi4_loop>:
    2f02:	aa 1f       	adc	r26, r26
    2f04:	bb 1f       	adc	r27, r27
    2f06:	ee 1f       	adc	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	a2 17       	cp	r26, r18
    2f0c:	b3 07       	cpc	r27, r19
    2f0e:	e4 07       	cpc	r30, r20
    2f10:	f5 07       	cpc	r31, r21
    2f12:	20 f0       	brcs	.+8      	; 0x2f1c <__udivmodsi4_ep>
    2f14:	a2 1b       	sub	r26, r18
    2f16:	b3 0b       	sbc	r27, r19
    2f18:	e4 0b       	sbc	r30, r20
    2f1a:	f5 0b       	sbc	r31, r21

00002f1c <__udivmodsi4_ep>:
    2f1c:	66 1f       	adc	r22, r22
    2f1e:	77 1f       	adc	r23, r23
    2f20:	88 1f       	adc	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	1a 94       	dec	r1
    2f26:	69 f7       	brne	.-38     	; 0x2f02 <__udivmodsi4_loop>
    2f28:	60 95       	com	r22
    2f2a:	70 95       	com	r23
    2f2c:	80 95       	com	r24
    2f2e:	90 95       	com	r25
    2f30:	9b 01       	movw	r18, r22
    2f32:	ac 01       	movw	r20, r24
    2f34:	bd 01       	movw	r22, r26
    2f36:	cf 01       	movw	r24, r30
    2f38:	08 95       	ret

00002f3a <__prologue_saves__>:
    2f3a:	2f 92       	push	r2
    2f3c:	3f 92       	push	r3
    2f3e:	4f 92       	push	r4
    2f40:	5f 92       	push	r5
    2f42:	6f 92       	push	r6
    2f44:	7f 92       	push	r7
    2f46:	8f 92       	push	r8
    2f48:	9f 92       	push	r9
    2f4a:	af 92       	push	r10
    2f4c:	bf 92       	push	r11
    2f4e:	cf 92       	push	r12
    2f50:	df 92       	push	r13
    2f52:	ef 92       	push	r14
    2f54:	ff 92       	push	r15
    2f56:	0f 93       	push	r16
    2f58:	1f 93       	push	r17
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	ca 1b       	sub	r28, r26
    2f64:	db 0b       	sbc	r29, r27
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	09 94       	ijmp

00002f72 <__epilogue_restores__>:
    2f72:	2a 88       	ldd	r2, Y+18	; 0x12
    2f74:	39 88       	ldd	r3, Y+17	; 0x11
    2f76:	48 88       	ldd	r4, Y+16	; 0x10
    2f78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f84:	b9 84       	ldd	r11, Y+9	; 0x09
    2f86:	c8 84       	ldd	r12, Y+8	; 0x08
    2f88:	df 80       	ldd	r13, Y+7	; 0x07
    2f8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f90:	1b 81       	ldd	r17, Y+3	; 0x03
    2f92:	aa 81       	ldd	r26, Y+2	; 0x02
    2f94:	b9 81       	ldd	r27, Y+1	; 0x01
    2f96:	ce 0f       	add	r28, r30
    2f98:	d1 1d       	adc	r29, r1
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	ed 01       	movw	r28, r26
    2fa6:	08 95       	ret

00002fa8 <atoi>:
    2fa8:	fc 01       	movw	r30, r24
    2faa:	88 27       	eor	r24, r24
    2fac:	99 27       	eor	r25, r25
    2fae:	e8 94       	clt
    2fb0:	21 91       	ld	r18, Z+
    2fb2:	20 32       	cpi	r18, 0x20	; 32
    2fb4:	e9 f3       	breq	.-6      	; 0x2fb0 <atoi+0x8>
    2fb6:	29 30       	cpi	r18, 0x09	; 9
    2fb8:	10 f0       	brcs	.+4      	; 0x2fbe <atoi+0x16>
    2fba:	2e 30       	cpi	r18, 0x0E	; 14
    2fbc:	c8 f3       	brcs	.-14     	; 0x2fb0 <atoi+0x8>
    2fbe:	2b 32       	cpi	r18, 0x2B	; 43
    2fc0:	41 f0       	breq	.+16     	; 0x2fd2 <atoi+0x2a>
    2fc2:	2d 32       	cpi	r18, 0x2D	; 45
    2fc4:	39 f4       	brne	.+14     	; 0x2fd4 <atoi+0x2c>
    2fc6:	68 94       	set
    2fc8:	04 c0       	rjmp	.+8      	; 0x2fd2 <atoi+0x2a>
    2fca:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulhi_const_10>
    2fce:	82 0f       	add	r24, r18
    2fd0:	91 1d       	adc	r25, r1
    2fd2:	21 91       	ld	r18, Z+
    2fd4:	20 53       	subi	r18, 0x30	; 48
    2fd6:	2a 30       	cpi	r18, 0x0A	; 10
    2fd8:	c0 f3       	brcs	.-16     	; 0x2fca <atoi+0x22>
    2fda:	1e f4       	brtc	.+6      	; 0x2fe2 <atoi+0x3a>
    2fdc:	90 95       	com	r25
    2fde:	81 95       	neg	r24
    2fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe2:	08 95       	ret

00002fe4 <itoa>:
    2fe4:	fb 01       	movw	r30, r22
    2fe6:	9f 01       	movw	r18, r30
    2fe8:	e8 94       	clt
    2fea:	42 30       	cpi	r20, 0x02	; 2
    2fec:	c4 f0       	brlt	.+48     	; 0x301e <itoa+0x3a>
    2fee:	45 32       	cpi	r20, 0x25	; 37
    2ff0:	b4 f4       	brge	.+44     	; 0x301e <itoa+0x3a>
    2ff2:	4a 30       	cpi	r20, 0x0A	; 10
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <itoa+0x1c>
    2ff6:	97 fb       	bst	r25, 7
    2ff8:	1e f4       	brtc	.+6      	; 0x3000 <itoa+0x1c>
    2ffa:	90 95       	com	r25
    2ffc:	81 95       	neg	r24
    2ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    3000:	64 2f       	mov	r22, r20
    3002:	77 27       	eor	r23, r23
    3004:	0e 94 67 17 	call	0x2ece	; 0x2ece <__udivmodhi4>
    3008:	80 5d       	subi	r24, 0xD0	; 208
    300a:	8a 33       	cpi	r24, 0x3A	; 58
    300c:	0c f0       	brlt	.+2      	; 0x3010 <itoa+0x2c>
    300e:	89 5d       	subi	r24, 0xD9	; 217
    3010:	81 93       	st	Z+, r24
    3012:	cb 01       	movw	r24, r22
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	a1 f7       	brne	.-24     	; 0x3000 <itoa+0x1c>
    3018:	16 f4       	brtc	.+4      	; 0x301e <itoa+0x3a>
    301a:	5d e2       	ldi	r21, 0x2D	; 45
    301c:	51 93       	st	Z+, r21
    301e:	10 82       	st	Z, r1
    3020:	c9 01       	movw	r24, r18
    3022:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <strrev>

00003026 <__mulhi_const_10>:
    3026:	7a e0       	ldi	r23, 0x0A	; 10
    3028:	97 9f       	mul	r25, r23
    302a:	90 2d       	mov	r25, r0
    302c:	87 9f       	mul	r24, r23
    302e:	80 2d       	mov	r24, r0
    3030:	91 0d       	add	r25, r1
    3032:	11 24       	eor	r1, r1
    3034:	08 95       	ret

00003036 <strrev>:
    3036:	dc 01       	movw	r26, r24
    3038:	fc 01       	movw	r30, r24
    303a:	67 2f       	mov	r22, r23
    303c:	71 91       	ld	r23, Z+
    303e:	77 23       	and	r23, r23
    3040:	e1 f7       	brne	.-8      	; 0x303a <strrev+0x4>
    3042:	32 97       	sbiw	r30, 0x02	; 2
    3044:	04 c0       	rjmp	.+8      	; 0x304e <strrev+0x18>
    3046:	7c 91       	ld	r23, X
    3048:	6d 93       	st	X+, r22
    304a:	70 83       	st	Z, r23
    304c:	62 91       	ld	r22, -Z
    304e:	ae 17       	cp	r26, r30
    3050:	bf 07       	cpc	r27, r31
    3052:	c8 f3       	brcs	.-14     	; 0x3046 <strrev+0x10>
    3054:	08 95       	ret

00003056 <_exit>:
    3056:	f8 94       	cli

00003058 <__stop_program>:
    3058:	ff cf       	rjmp	.-2      	; 0x3058 <__stop_program>
